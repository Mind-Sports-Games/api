openapi: "3.0.0"
info:
  version: 2.0.0
  title: playstrategy.org API reference
  x-logo:
    url: https://assets.playstrategy.org/assets/_2402ey/logo/playstrategy.svg
    backgroundColor: #ffffff
  description: "\n\n# Introduction\nWelcome to the reference for the Play Strategy API! Play Strategy is free/libre, open-source chess server powered by volunteers and donations.\n\n\
  \ - [Contribute to this documentation on Github](https://github.com/Mind-Sports-Games/api).\n\
  \ - Check out [Play Strategy widgets to embed in your website](https://playstrategy.org/developers).\n\
  \n## Endpoint\n\
  \ All requests go to `https://playstrategy.org`.\n\
  \n## Clients\n\
  - [Python general API](https://github.com/rhgrant10/berserk)\n\
  - [Python general API - async](https://pypi.org/project/async-lichess-sdk) (note: some changes may be required)\n\
  - [Python Play Strategy Bot](https://github.com/ShailChoksi/lichess-bot) (note: some changes may be required)\n\
  - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) (note: some changes may be required)\n\
  \n## Rate limiting\n\
  \ All requests are rate limited using various strategies,\
  \ to ensure the API remains responsive for everyone.\n\
  \ Only make one request at a time.\n\
  \ If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429),\
  \ please wait a full minute before resuming API usage."
servers:
  - url: https://playstrategy.org
tags:
- name: Account
  description: |
    Read and write account informations and preferences.
    https://playstrategy.org/account/preferences/game-display
- name: Users
  description: |
    Access registered users on Play Strategy.
    https://playstrategy.org/player
- name: Relations
  description: |
    Access relations between users.
- name: Games
  description: |
    Access games played on Play Strategy.
    https://playstrategy.org/games
- name: Teams
  description: |
    Access and manage Play Strategy teams and their members.
    https://playstrategy.org/team
- name: Board
  description: "Play on Play Strategy with physical boards and third-party clients.\n
  \ Works with normal Play Strategy accounts. Engine play or assistance is forbidden.\n\n\
  \n### Features\n\
  \ - [Stream incoming chess moves](#operation/boardGameStream)\n\
  \ - [Play chess moves](#operation/boardGameMove)\n\
  \ - [Read](#operation/boardGameStream) and [write](#operation/boardGameChat) in the player and spectator chats\n\
  \ - [Receive](#operation/apiStreamEvent), [create](#operation/challengeCreate) and [accept](#operation/challengeAccept) (or [decline](#operation/challengeDecline)) challenges\n\
  \ - [Abort](#operation/boardGameAbort) and [resign](#operation/boardGameResign) games\n\
  \ - Compatible with normal Play Strategy accounts\n\n
  \n### Restrictions\n\
  \ - Engine assistance is strictly forbidden\n\
  \ - Time controls: [Rapid, Classical and Correspondence](https://playstrategy.org/faq#time-controls) only\n\
  \n### Links\n\
  \ - [Announcement](https://lichess.org/blog/XlRW5REAAB8AUJJ-/welcome-lichess-boards) (note: some changes from lichess may be required)\n\
  \ - [Certabo support](https://github.com/haklein/certabo-lichess)\n\
  \ - [Lichs (play from command-line)](https://github.com/Cqsi/lichs)"
- name: Bot
  description: "Play on Play Strategy as a bot. Allows engine play.\n
  \ Read the [blog post announcement of lichess bots](https://lichess.org/blog/WvDNticAAMu_mHKP/welcome-lichess-bots). (Note, some changes between Lichess and Play Strategy may be required)\n\n
  \ Only works with [Bot accounts](#operation/botAccountUpgrade).\n\n\
  \n### Features\n\
  \ - [Stream incoming chess moves](#operation/botGameStream)\n\
  \ - [Play chess moves](#operation/botGameMove)\n\
  \ - [Read](#operation/botGameStream) and [write](#operation/botGameChat) in the player and spectator chats\n\
  \ - [Receive](#operation/apiStreamEvent), [create](#operation/challengeCreate) and [accept](#operation/challengeAccept) (or [decline](#operation/challengeDecline)) challenges\n\
  \ - [Abort](#operation/botGameAbort) and [resign](#operation/botGameResign) games\n\
  \ - Engine assistance is allowed\n\
  \n### Restrictions\n\
  \ - Bots can only play challenge games:  pools and tournaments are off-limits\n\
  \ - Bots cannot play UltraBullet (¼+0) because it requires making too many requests. But 0+1 and ½+0 are allowed.\n\
  \n### Integrations\n\
  \ - [Python3 lichess-bot](https://github.com/ShailChoksi/lichess-bot) (official) (Note: Some changes may be required)\n\
  \ - [JavaScript bot-o-tron](https://github.com/tailuge/bot-o-tron) (Note: Some changes may be required)\n\
  \ - [Golang lichess-bot](https://github.com/dolegi/lichess-bot) (Note: Some changes may be required)\n\
  \ - Yours? Please make [an issue or pull request](https://github.com/Mind-Sports-Games/api).\n\
  \n### Links\n\
  \ - [Announcement](https://lichess.org/blog/WvDNticAAMu_mHKP/welcome-lichess-bots)\n\
  \ - Watch [Play Strategy Bot TV](https://playstrategy.org/tv/bot)"
- name: Challenges
  description: |
    Send and receive challenges to play.

    To create a lot of challenges, consider [bulk pairing](#operation/bulkPairingCreate) instead.
- name: Bulk pairings
  description: |
    Create many games for other players.

    These endpoints are intended for tournament organisers.
- name: Arena tournaments
  description: |
    Access Arena tournaments played on Play Strategy.
    [Official Arena tournaments](https://playstrategy.org/tournament) are maintained by Play Strategy,
    but you can [create your own Arena tournaments](https://playstrategy.org/tournament/new) as well.
- name: Swiss tournaments
  description: |
    Access Swiss tournaments played on Play Strategy.
    [Read more about Swiss tournaments.](https://playstrategy.org/swiss).
- name: Simuls
  description: |
    Access simuls played on Play Strategy.
    https://playstrategy.org/simul
- name: Studies
  description: |
    Access Play Strategy studies.
    https://playstrategy.org/study
- name: Messaging
  description: |
    Private messages with other players.
    https://playstrategy.org/inbox
- name: Broadcasts
  description: |
    Relay chess events on Play Strategy.
    [Official broadcasts](https://playstrategy.org/broadcast) are maintained by Play Strategy,
    but you can [create your own broadcasts](https://playstrategy.org/broadcast/new) to cover any live game or chess event.
    You will need to publish PGN on a public URL so that Play Strategy can pull updates from it.
    Alternatively, you can push PGN updates to Play Strategy using this API.
- name: Analysis
  description: |
    Access Play Strategy cloud evaluations database.
    https://playstrategy.org/analysis
- name: OAuth
  description: |
    Requests taking advantage of OAuth authentication.
    https://playstrategy.org/account/oauth/app
paths:
  /api/users/status:
    get:
      operationId: apiUsersStatus
      summary: Get real-time users status
      description: |
        Read the `online`, `playing` and `streaming` flags of several users.

        This API is very fast and cheap on Play Strategy side.
        So you can call it quite often (like once every 5 seconds).

        Use it to track players and know when they're connected on Play Strategy and playing games.
      tags:
        - Users
      security: []
      parameters:
        - in: query
          name: ids
          required: true
          description: User IDs separated by commas. Up to 50 IDs.
          schema:
            type: string
          example: aliquantus,chess-network,lovlas
      responses:
        200:
          description: The list of users and their respective statuses.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    title:
                      type: string
                      nullable: true
                    online:
                      type: boolean
                      nullable: true
                    playing:
                      type: boolean
                      nullable: true
                    streaming:
                      type: boolean
                      nullable: true
                    patron:
                      type: boolean
                      nullable: true
                example: [
                  {
                    "id": "aliquantus",
                    "name": "Aliquantus"
                  },
                  {
                    "id": "chess-network",
                    "name": "Chess-Network",
                    "title": "NM",
                    "online": true,
                    "playing": true,
                    "streaming": true,
                    "patron": true
                  }
                ]

  /player:
    get:
      operationId: player
      summary: Get all top 10
      tags:
        - Users
      security: []
      description: |
        Get the top 10 players for each speed and variant.

        See https://playstrategy.org/player.
      parameters:
        - $ref: '#/components/parameters/playstrategy'
      responses:
        200:
          description: The list of variants with their respective top players.
          content:
            application/vnd.playstrategy.v3+json:
              schema:
                $ref: '#/components/schemas/Top10s'

  /player/top/{nb}/{perfType}:
    get:
      operationId: playerTopNbPerfType
      summary: Get one leaderboard
      tags:
        - Users
      security: []
      description: |
        Get the leaderboard for a single speed or variant (a.k.a. `perfType`).
        There is no leaderboard for correspondence or puzzles.

        See https://playstrategy.org/player/top/200/bullet.
      parameters:
        - $ref: '#/components/parameters/playstrategy'
        - in: path
          name: nb
          description: How many users to fetch
          schema:
            type: integer
            minimum: 1
            maximum: 200
            example: 100
          required: true
        - in: path
          name: perfType
          description: The speed or variant
          schema:
            type: string
            example: bullet
            enum:
              - ultraBullet
              - bullet
              - blitz
              - rapid
              - classical
              - chess960
              - crazyhouse
              - antichess
              - atomic
              - horde
              - kingOfTheHill
              - racingKings
              - threeCheck
              - fiveCheck
              - noCastling
              - linesOfAction
              - scrambledEggs
              - international
              - antidraughts
              - breakthrough
              - pool
              - frisian
              - frysk
              - russian
              - spanish
              - brazilian
              - english
              - shogi
              - xangqi
              - minishogi
              - minixangqi
              - flipello
              - flipello10
              - amazons
              - togyzkumalak
              - oware
          required: true
      responses:
        200:
          description: The list of top players for the variant.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/vnd.playstrategy.v3+json:
              schema:
                $ref: '#/components/schemas/Leaderboard'

  /api/user/{username}:
    get:
      operationId: apiUser
      summary: Get user public data
      description: |
        Read public data of a user.
      tags:
        - Users
      security: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        200:
          description: The information of the user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserExtended'

  /api/user/{username}/rating-history:
    get:
      operationId: apiUserRatingHistory
      summary: Get rating history of a user
      description: |
        Read rating history of a user, for all perf types.
        There is at most one entry per day.
        Format of an entry is `[year, month, day, rating]`.
        `month` starts at zero (January).
      tags:
        - Users
      security: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        200:
          description: The rating history of the user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingHistory'

  /api/user/{username}/activity:
    get:
      operationId: apiUserActivity
      summary: Get user activity
      description: |
        Read data to generate the activity feed of a user.
      tags:
        - Users
      security: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        200:
          description: The activity feed of the user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              example:
                https://gist.github.com/ornicar/0ee2d2427cb74ed1a35e86f5ba09fabc

#   /api/puzzle/daily:
#     get:
#       operationId: apiPuzzleDaily
#       summary: Get the daily puzzle
#       description: |
#         Get the daily Play Strategy puzzle in JSON format.

#         Alternatively, you can [post it in your slack workspace](https://playstrategy.org/daily-puzzle-slack).
#       tags:
#         - Puzzles
#       security: []
#       responses:
#         200:
#           description: The daily puzzle.
#           headers:
#             Access-Control-Allow-Origin:
#               schema:
#                 type: string
#                 default: "'*'"
#           content:
#             application/x-ndjson:
#               schema:
#                 $ref: '#/components/schemas/PuzzleJson'

#   /api/puzzle/activity:
#     get:
#       operationId: apiPuzzleActivity
#       summary: Get your puzzle activity
#       description: |
#         Download your puzzle activity in [ndjson](http://ndjson.org/) format.

#         Puzzle activity is sorted by reverse chronological order (most recent first)

#         We recommend streaming the response, for it can be very long.
#       tags:
#         - Puzzles
#         - OAuth
#       security:
#         - OAuth2: ["puzzle:read"]
#       parameters:
#         - in: query
#           name: max
#           description: How many entries to download. Leave empty to download all activity.
#           schema:
#             type: integer
#             minimum: 1
#             default: null
#       responses:
#         200:
#           description: The puzzle activity of the logged in user.
#           headers:
#             Access-Control-Allow-Origin:
#               schema:
#                 type: string
#                 default: "'*'"
#           content:
#             application/x-ndjson:
#               schema:
#                 $ref: '#/components/schemas/PuzzleRoundJson'

  /api/users:
    post:
      operationId: apiUsers
      summary: Get users by ID
      tags:
        - Users
      security: []
      description: |
        Get up to 300 users by their IDs. Users are returned in the order same order as the IDs.

        The method is `POST` so a longer list of IDs can be sent in the request body.
      requestBody:
        description: User IDs separated by commas.
        required: true
        content:
          text/plain:
            schema:
              type: string
            example: "aliquantus,chess-network,lovlas"
      responses:
        200:
          description: The list of users.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /api/account:
    get:
      operationId: accountMe
      summary: Get my profile
      description: |
        Public informations about the logged in user.
      tags:
        - Account
        - OAuth
      security:
        - OAuth2: []
      responses:
        200:
          description: The public informations about the logged in user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserExtended'

  /api/account/email:
    get:
      operationId: accountEmail
      summary: Get my email address
      description: |
        Read the email address of the logged in user.
      tags:
        - Account
        - OAuth
      security:
        - OAuth2: ["email:read"]
      responses:
        200:
          description: The email address of the logged in user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                properties:
                  email:
                    type: string
                example:
                  email: abathur@mail.org

  /api/account/preferences:
    get:
      operationId: account
      summary: Get my preferences
      description: |
        Read the preferences of the logged in user.

        - https://playstrategy.org/account/preferences/game-display
        - https://github.com/ornicar/lila/blob/master/modules/pref/src/main/Pref.scala
      tags:
        - Account
        - OAuth
      security:
        - OAuth2: ["preference:read"]
      responses:
        200:
          description: The preferences of the logged in user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                properties:
                  prefs:
                    $ref: '#/components/schemas/UserPreferences'

  /api/account/kid:
    get:
      operationId: accountKid
      summary: Get my kid mode status
      description: |
        Read the kid mode status of the logged in user.

        - https://playstrategy.org/account/kid
      tags:
        - Account
        - OAuth
      security:
        - OAuth2: ["preference:read"]
      responses:
        200:
          description: The kid mode status of the logged in user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                properties:
                  kid:
                    type: boolean
                example:
                  kid: false
    post:
      operationId: accountKidPost
      summary: Set my kid mode status
      description: |
        Set the kid mode status of the logged in user.

        - https://playstrategy.org/account/kid
      tags:
        - Account
        - OAuth
      security:
        - OAuth2: ["preference:write"]
      parameters:
        - in: query
          name: v
          required: true
          description: Kid mode status
          schema:
            type: boolean
          example: true
      responses:
        200:
          description: The kid mode status was set successfully for the logged in user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'

  /game/export/{gameId}:
    get:
      operationId: gamePgn
      summary: Export one game
      description: |
        Download one game in either PGN or JSON format.

        Ongoing games have their last 3 moves omitted, after move 5.
      tags:
        - Games
      security: []
      parameters:
        - in: path
          name: gameId
          description: The game ID (8 characters).
          required: true
          schema:
            type: string
        - in: query
          name: moves
          description: Include the PGN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: pgnInJson
          description: Include the full PGN within the JSON response, in a `pgn` field.
          schema:
            type: boolean
            default: false
        - in: query
          name: tags
          description: Include the PGN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock comments in the PGN moves, when available.

            Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
          schema:
            type: boolean
            default: true
        - in: query
          name: evals
          description: |
            Include analysis evaluation comments in the PGN, when available.

            Example: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
          schema:
            type: boolean
            default: true
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
          schema:
            type: boolean
            default: true
        - in: query
          name: literate
          description: |
            Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.

            Example: `5... g4? { (-0.98 → 0.60) Mistake. Best move was h6. } (5... h6 6. d4 Ne7 7. g3 d5 8. exd5 fxg3 9. hxg3 c6 10. dxc6)`
          schema:
            type: boolean
            default: false
        - in: query
          name: players
          description: |
            URL of a text file containing real names and ratings, to replace Play Strategy usernames and ratings in the PGN.
            Example: https://gist.githubusercontent.com/ornicar/6bfa91eb61a2dcae7bcd14cce1b2a4eb/raw/768b9f6cc8a8471d2555e47ba40fb0095e5fba37/gistfile1.txt
          schema:
            type: string
      responses:
        200:
          description: The game representation.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/GamePgn'
            application/json:
              schema:
                $ref: '#/components/schemas/GameJson'

  /api/user/{username}/current-game:
    get:
      operationId: apiUserCurrentGame
      summary: Export ongoing game of a user
      description: |
        Download the ongoing game, or the last game played, of a user.
        Available in either PGN or JSON format.
        If the game is ongoing, the 3 last moves are omitted.
      tags:
        - Games
      security: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
        - in: query
          name: moves
          description: Include the PGN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: pgnInJson
          description: Include the full PGN within the JSON response, in a `pgn` field.
          schema:
            type: boolean
            default: false
        - in: query
          name: tags
          description: Include the PGN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock comments in the PGN moves, when available.

            Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
          schema:
            type: boolean
            default: true
        - in: query
          name: evals
          description: |
            Include analysis evaluation comments in the PGN, when available.

            Example: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
          schema:
            type: boolean
            default: true
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
          schema:
            type: boolean
            default: true
        - in: query
          name: literate
          description: |
            Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.

            Example: `5... g4? { (-0.98 → 0.60) Mistake. Best move was h6. } (5... h6 6. d4 Ne7 7. g3 d5 8. exd5 fxg3 9. hxg3 c6 10. dxc6)`
          schema:
            type: boolean
            default: false
        - in: query
          name: players
          description: |
            URL of a text file containing real names and ratings, to replace Play Strategy usernames and ratings in the PGN.
            Example: https://gist.githubusercontent.com/ornicar/6bfa91eb61a2dcae7bcd14cce1b2a4eb/raw/768b9f6cc8a8471d2555e47ba40fb0095e5fba37/gistfile1.txt
          schema:
            type: string
      responses:
        200:
          description: The ongoing (or last) game of a user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/GamePgn'
            application/json:
              schema:
                $ref: '#/components/schemas/GameJson'

  /api/games/user/{username}:
    get:
      operationId: apiGamesUser
      summary: Export games of a user
      description: |
        Download all games of any user in PGN or [ndjson](http://ndjson.org/) format.

        Games are sorted by reverse chronological order (most recent first)

        We recommend streaming the response, for it can be very long.
        https://playstrategy.org/@/german11 for instance has more than 320,000 games.

        The game stream is throttled, depending on who is making the request:
          - Anonymous request: 20 games per second
          - [OAuth2 authenticated](#section/Authentication) request: 30 games per second
          - Authenticated, downloading your own games: 60 games per second
      tags:
        - Games
        - OAuth
      security:
        - OAuth2: []
      parameters:
        - in: path
          name: username
          description: The user name.
          schema:
            type: string
          required: true
        - in: query
          name: since
          description: Download games played since this timestamp.
          schema:
            type: integer
            minimum: 1356998400070
            default: Account creation date
        - in: query
          name: until
          description: Download games played until this timestamp.
          schema:
            type: integer
            minimum: 1356998400070
            default: Now
        - in: query
          name: max
          description: How many games to download. Leave empty to download all games.
          schema:
            type: integer
            minimum: 1
            default: null
        - in: query
          name: vs
          description: "[Filter] Only games played against this opponent"
          schema:
            type: string
        - in: query
          name: rated
          description: "[Filter] Only rated (`true`) or casual (`false`) games"
          schema:
            type: boolean
            default: null
        - in: query
          name: perfType
          description: "[Filter] Only games in these speeds or variants.\n
          \nMultiple perf types can be specified, separated by a comma.\n
          \nExample: blitz,rapid,classical"
          schema:
            type: string
            default: null
            enum:
              - ultraBullet
              - bullet
              - blitz
              - rapid
              - classical
              - correspondence
              - chess960
              - crazyhouse
              - antichess
              - atomic
              - horde
              - kingOfTheHill
              - racingKings
              - threeCheck
        - in: query
          name: playerIndex
          description: "[Filter] Only games played as this playerIndex."
          schema:
            type: string
            default: null
            enum:
              - p1
              - p2
        - in: query
          name: analysed
          description: "[Filter] Only games with or without a computer analysis available"
          schema:
            type: boolean
            default: null
        - in: query
          name: ongoing
          description: "[Filter] Also include ongoing games"
          schema:
            type: boolean
            default: false
        - in: query
          name: moves
          description: Include the PGN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: pgnInJson
          description:
            Include the full PGN within the JSON response, in a `pgn` field.

            The response type must be set to `application/x-ndjson` by the request `Accept` header.
          schema:
            type: boolean
            default: false
        - in: query
          name: tags
          description: Include the PGN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock comments in the PGN moves, when available.

            Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
          schema:
            type: boolean
            default: false
        - in: query
          name: evals
          description: |
            Include analysis evaluation comments in the PGN, when available.

            Example: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
          schema:
            type: boolean
            default: false
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
          schema:
            type: boolean
            default: false
        - in: query
          name: players
          description: |
            URL of a text file containing real names and ratings, to replace Play Strategy usernames and ratings in the PGN.
            Example: https://gist.githubusercontent.com/ornicar/6bfa91eb61a2dcae7bcd14cce1b2a4eb/raw/768b9f6cc8a8471d2555e47ba40fb0095e5fba37/gistfile1.txt
          schema:
            type: string
      responses:
        200:
          description: The games of the user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/GamePgn'
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/GameJson'

  /games/export/_ids:
    post:
      operationId: gamesExportIds
      summary: Export games by IDs
      description: |
        Download games by IDs in PGN or [ndjson](http://ndjson.org/) format.

        Games are sorted by reverse chronological order (most recent first)

        The method is `POST` so a longer list of IDs can be sent in the request body.

        300 IDs can be submitted.

        Ongoing games have their last 3 moves omitted, after move 5.
      tags:
        - Games
      security: []
      requestBody:
        description: Game IDs separated by commas. Up to 300.
        required: true
        content:
          text/plain:
            schema:
              type: string
            example: "TJxUmbWK,4OtIh2oh,ILwozzRZ"
      parameters:
        - in: query
          name: moves
          description: Include the PGN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: pgnInJson
          description: Include the full PGN within the JSON response, in a `pgn` field.
          schema:
            type: boolean
            default: false
        - in: query
          name: tags
          description: Include the PGN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock comments in the PGN moves, when available.

            Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
          schema:
            type: boolean
            default: false
        - in: query
          name: evals
          description: |
            Include analysis evaluation comments in the PGN, when available.

            Example: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
          schema:
            type: boolean
            default: false
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
          schema:
            type: boolean
            default: false
        - in: query
          name: players
          description: |
            URL of a text file containing real names and ratings, to replace Play Strategy usernames and ratings in the PGN.
            Example: https://gist.githubusercontent.com/ornicar/6bfa91eb61a2dcae7bcd14cce1b2a4eb/raw/768b9f6cc8a8471d2555e47ba40fb0095e5fba37/gistfile1.txt
          schema:
            type: string
      responses:
        200:
          description: The representation of the games.
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/GamePgn'
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/GameJson'

  /api/stream/games-by-users:
    post:
      operationId: gamesByUsers
      summary: Stream current games
      description: |
        Stream the games played between a list of users, in real time.
        Only games where **both players** are part of the list are included.

        Maximum number of users: 300.

        **Games are streamed as [ndjson](http://ndjson.org/)**, i.e. one JSON object per line.

        The method is `POST` so a longer list of IDs can be sent in the request body.
      tags:
        - Games
      security: []
      requestBody:
        description: Up to 300 user IDs separated by commas.
        required: true
        content:
          text/plain:
            schema:
              type: string
            example: aliquantus,chess-network,lovlas
      responses:
        200:
          description: The stream of the games played between the users.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                example: {"id":"A5fcMO3k","rated":true,"variant":"standard","speed":"bullet","perf":"bullet","createdAt":1525789431889,"status":20,"clock":{"initial":60,"increment":0,"totalTime":60},"players":{"p1":{"userId":"kastorcito","rating":2617},"p2":{"userId":"er_or","rating":2288}}}

  /api/account/playing:
    get:
      operationId: apiAccountPlaying
      summary: Get ongoing games
      description: |
        Get the ongoing games of the current user.
        Real-time and correspondence games are included.
        The most urgent games are listed first.
      tags:
        - Games
        - OAuth
      security:
        - OAuth2: []
      parameters:
        - in: query
          name: nb
          description: Max number of games to fetch
          schema:
            type: integer
            default: 9
            minimum: 1
            maximum: 50
      responses:
        200:
          description: The ongoing games of the logged in user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                example: {"nowPlaying":[{"fullId":"knbD9FPUqhra","gameId":"knbD9FPU","fen":"rnbqkbnr/pp3pp1/8/3p3p/1PpPp3/P1P1P3/5PPP/RNBQKBNR","playerIndex":"p1","lastMove":"c5c4","variant":{"key":"standard","name":"Standard"},"speed":"correspondence","perf":"correspondence","rated":true,"opponent":{"id":"thibot","username":"BOT thibot","rating":1500},"isMyTurn":true}]}

  /api/tv/channels:
    get:
      operationId: tvChannels
      summary: Get current TV games
      description: |
        Get basic info about the best games being played for each speed and variant,
        but also computer games and bot games.

        See [playstrategy.org/tv](https://playstrategy.org/tv).
      tags:
        - Games
      security: []
      responses:
        200:
          description: The list of games being played for each speed and variant.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                example: {"Bot":{"user":{"id":"leelachess","name":"LeelaChess","title":"BOT"},"rating":2660,"gameId":"Zznv9MIl"},"Blitz":{"user":{"id":"lekkerkortook","name":"LekkerKortOok"},"rating":2603,"gameId":"hTJ4v7Mp"},"Racing Kings":{"user":{"id":"chesslo21","name":"chesslo21"},"rating":2123,"gameId":"lgCDl5Of"},"UltraBullet":{"user":{"id":"farmville","name":"Farmville"},"rating":2338,"gameId":"NEY6OQ32"},"Bullet":{"user":{"id":"nurmibrah","name":"nurmiBrah"},"rating":2499,"gameId":"5LgyE516"},"Classical":{"user":{"id":"holden_m_j_thomas","name":"Holden_M_J_Thomas"},"rating":1806,"gameId":"k3oLby6N"},"Three-check":{"user":{"id":"pepellou","name":"pepellou","patron":true},"rating":1978,"gameId":"Og5RCvmu"},"Antichess":{"user":{"id":"maria-bakkar","name":"maria-bakkar"},"rating":2103,"gameId":"toCr41yx"},"Computer":{"user":{"id":"oh_my_goat_im_so_bat","name":"oh_my_goat_Im_so_bat"},"rating":2314,"gameId":"TkI4qZxu"},"Horde":{"user":{"id":"habitualchess","name":"HabitualChess"},"rating":1803,"gameId":"oMofN63H"},"Rapid":{"user":{"id":"denpayd","name":"DenpaYD"},"rating":2289,"gameId":"IcWOl8ee"},"Atomic":{"user":{"id":"meetyourdemise","name":"MeetYourDemise"},"rating":2210,"gameId":"tvMxtCMN"},"Crazyhouse":{"user":{"id":"mathace","name":"mathace"},"rating":2397,"gameId":"i3gTZlUb"},"Chess960":{"user":{"id":"voja_7","name":"voja_7"},"rating":1782,"gameId":"lrXLcedu"},"King of the Hill":{"user":{"id":"nadime","name":"Nadime"},"rating":1500,"gameId":"DsQn8aEV"},"Top Rated":{"user":{"id":"lekkerkortook","name":"LekkerKortOok"},"rating":2603,"gameId":"hTJ4v7Mp"}}

  /api/tv/feed:
    get:
      operationId: tvFeed
      summary: Stream current TV game
      description: |
        Stream positions and moves of the current [TV game](https://playstrategy.org/tv) in [ndjson](http://ndjson.org/).
        A summary of the game is sent as a first message, and when the featured game changes.

        Try it with `curl https://playstrategy.org/api/tv/feed`.
      tags:
        - Games
      security: []
      responses:
        200:
          description: The stream of the current TV game.
          content:
            application/x-ndjson:
              schema:
                example:
                  {"t":"featured","d":{"id":"qVSOPtMc","orientation":"p2","players":[{"playerIndex":"p1","user":{"name":"lizen9","id":"lizen9","title":"GM"},"rating":2531},{"playerIndex":"p2","user":{"name":"lizen29","title":"WGM","id":"lizen29"},"rating":2594}],"fen":"rnbqk1r1/ppp1ppbp/8/N2p2p1/8/1PQPP3/P1P2PPn/R1B1K1NR"}}

  /api/stream/game/{id}:
    get:
      operationId: streamGame
      summary: Stream moves of a game
      description: |
        Stream positions and moves of any ongoing game, in [ndjson](http://ndjson.org/).

        A description of the game is sent as a first message.
        Then a message is sent each time a move is played.
        Finally a description of the game is sent when it finishes, and the stream is closed.

        After move 5, the stream intentionally remains 3 moves behind the game status, as to prevent cheat bots from using this API.

        No more than 8 game streams can be opened at the same time from the same IP address.
      tags:
        - Games
      security: []
      responses:
        200:
          description: The stream of the game moves.
          content:
            application/x-ndjson:
              schema:
                example: |
                  {"id":"LuGQwhBb","variant":{"key":"standard","name":"Standard","short":"Std"},"speed":"blitz","perf":"blitz","rated":true,"initialFen":"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1","fen":"rnbqkb1r/1p1ppppp/p6n/2p4Q/8/1P2P3/P1PP1PPP/RNB1KBNR w KQkq - 0 4","player":"p1","turns":6,"startedAtTurn":0,"source":"pool","status":{"id":20,"name":"started"},"createdAt":1620029815106,"lastMove":"c7c5"}
                  {"fen":"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w","wc":180,"bc":180}
                  {"fen":"rnbqkbnr/pppppppp/8/8/8/4P3/PPPP1PPP/RNBQKBNR b","lm":"e2e3","wc":180,"bc":180}
                  {"fen":"rnbqkb1r/pppppppp/7n/8/8/4P3/PPPP1PPP/RNBQKBNR w","lm":"g8h6","wc":180,"bc":180}
                  {"fen":"rnbqkb1r/pppppppp/7n/8/8/1P2P3/P1PP1PPP/RNBQKBNR b","lm":"b2b3","wc":177,"bc":180}
                  {"fen":"rnbqkb1r/1ppppppp/p6n/8/8/1P2P3/P1PP1PPP/RNBQKBNR w","lm":"a7a6","wc":177,"bc":177}

  /api/import:
    post:
      operationId: gameImport
      summary: Import one game
      description: |
        Import a game from PGN. See https://playstrategy.org/paste.

        Rate limiting: 200 games per hour for OAuth requests, 100 games per hour for anonymous requests.

        To broadcast ongoing games, consider [pushing to a broadcast instead](#operation/broadcastPush).
      tags:
        - Games
        - OAuth
      security:
        - OAuth2: []
      requestBody:
        description: A single game to import
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                pgn:
                  type: string
                  description: The PGN. It can contain only one game. Most standard tags are supported.
      responses:
        200:
          description: The game was successfully imported.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                example: {"id":"R6iLjwz5","url":"https://playstrategy.org/R6iLjwz5"}

  /api/tournament:
    get:
      operationId: apiTournament
      summary: Get current tournaments
      description: |
        Get recently finished, ongoing, and upcoming tournaments.

        This API is used to display the [Play Strategy tournament schedule](https://playstrategy.org/tournament).
      tags:
        - "Arena tournaments"
      security: []
      responses:
        200:
          description: The list of current tournaments.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArenaTournaments'
    post:
      operationId: apiTournamentPost
      summary: Create a new Arena tournament
      description: |
        Create a public or private Arena tournament.

        This endpoint mirrors the form on https://playstrategy.org/tournament/new.

        You can create up to 12 public tournaments per day, or 24 private tournaments.

        A team battle can be created by specifying the `teambBattleByTeam` argument.
      tags:
        - "Arena tournaments"
      security:
        - OAuth2: ["tournament:write"]
      requestBody:
        description: Parameters of the tournament
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The tournament name. Leave empty to get a random Grandmaster name
                clockTime:
                  type: number
                  description: Clock initial time in minutes
                  example: 2
                  minimum: 0
                  maximum: 60
                  enum:
                    - 0
                    - 0.25
                    - 0.5
                    - 0.75
                    - 1
                    - 1.5
                    - 2
                    - 3
                    - 4
                    - 5
                    - 6
                    - 7
                    - 10
                    - 15
                    - 20
                    - 25
                    - 30
                    - 40
                    - 50
                    - 60
                clockIncrement:
                  type: integer
                  description: Clock increment in seconds
                  example: 1
                  minimum: 0
                  maximum: 60
                minutes:
                  type: integer
                  description: How long the tournament lasts, in minutes
                  example: 60
                  minimum: 0
                  maximum: 360
                waitMinutes:
                  type: integer
                  description: How long to wait before starting the tournament, from now, in minutes
                  minimum: 0
                  maximum: 360
                  default: 5
                startDate:
                  type: integer
                  description: Timestamp to start the tournament at a given date and time. Overrides the `waitMinutes` setting
                variant:
                  type: string
                  description: The variant to use in tournament games
                  enum:
                    - standard
                    - chess960
                    - crazyhouse
                    - antichess
                    - atomic
                    - horde
                    - kingOfTheHill
                    - racingKings
                    - threeCheck
                  default: standard
                rated:
                  type: boolean
                  description: Games are rated and impact players ratings
                  default: true
                position:
                  type: string
                  description: Custom initial position (in FEN) for all games of the tournament. Must be a legal chess position. Only works with standard chess, not variants (except Chess960).
                berserkable:
                  type: boolean
                  description: Whether the players can use berserk
                  default: true
                streakable:
                  type: boolean
                  description: After 2 wins, consecutive wins grant 4 points instead of 2.
                  default: true
                # "conditions.titled":
                #   type: boolean
                #   description: Whether to require a title to enter the tournament
                #   default: false
                hasChat:
                  type: boolean
                  description: Whether the players can discuss in a chat
                  default: true
                description:
                  type: string
                  description: Anything you want to tell players about the tournament
                password:
                  type: string
                  description: Make the tournament private, and restrict access with a password
                teambBattleByTeam:
                  type: string
                  description: |
                    Set the ID of a team you lead to create a team battle.
                    The other teams can be added using the [team battle edit endpoint](#operation/apiTournamentTeamBattlePost).
                conditions.teamMember.teamId:
                  type: string
                  description: |
                    Restrict entry to members of a team.

                    The teamId is the last part of a team URL, e.g. https://playstrategy.org/team/coders has teamId = `coders`.

                    Leave empty to let everyone join the tournament.

                    Do not use this to create team battles, use `teamBattleByTeam` instead.
                conditions.minRating.rating:
                  type: integer
                  description: Minimum rating to join. Leave empty to let everyone join the tournament.
                conditions.maxRating.rating:
                  type: integer
                  description: Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.
                conditions.nbRatedGame.nb:
                  type: integer
                  description: Minimum number of rated games required to join.
              required:
                - clockTime
                - clockIncrement
                - minutes
      responses:
        200:
          description: The Arena tournament has been successfully created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArenaTournament'
        400:
          description: The creation of the Arena tournament failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/tournament/{id}:
    get:
      operationId: tournament
      summary: Get info about an Arena tournament
      description: |
        Get detailed info about recently finished, current, or upcoming tournament's duels, player standings, and other info.
      tags:
        - "Arena tournaments"
      security: []
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
          required: true
        - in: query
          name: page
          description: Specify which page of player standings to view.
          schema:
            type: number
            example: 1
            default: 1
            minimum: 1
            maximum: 200
      responses:
        200:
          description: The information of the Arena tournament.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArenaTournament'
    post:
      operationId: apiTournamentUpdate
      summary: Update an Arena tournament
      description: |
        Update an Arena tournament.

        Be mindful not to make important changes to ongoing tournaments.

        Can be used to update a team battle.
      tags:
        - "Arena tournaments"
      security:
        - OAuth2: ["tournament:write"]
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
          required: true
      requestBody:
        description: Parameters of the tournament
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The tournament name. Leave empty to get a random Grandmaster name
                clockTime:
                  type: number
                  description: Clock initial time in minutes
                  example: 2
                  minimum: 0
                  maximum: 60
                  enum:
                    - 0
                    - 0.25
                    - 0.5
                    - 0.75
                    - 1
                    - 1.5
                    - 2
                    - 3
                    - 4
                    - 5
                    - 6
                    - 7
                    - 10
                    - 15
                    - 20
                    - 25
                    - 30
                    - 40
                    - 50
                    - 60
                clockIncrement:
                  type: integer
                  description: Clock increment in seconds
                  example: 1
                  minimum: 0
                  maximum: 60
                minutes:
                  type: integer
                  description: How long the tournament lasts, in minutes
                  example: 60
                  minimum: 0
                  maximum: 360
                waitMinutes:
                  type: integer
                  description: How long to wait before starting the tournament, from now, in minutes
                  minimum: 0
                  maximum: 360
                  default: 5
                startDate:
                  type: integer
                  description: Timestamp to start the tournament at a given date and time. Overrides the `waitMinutes` setting
                variant:
                  type: string
                  description: The variant to use in tournament games
                  enum:
                    - standard
                    - chess960
                    - crazyhouse
                    - antichess
                    - atomic
                    - horde
                    - kingOfTheHill
                    - racingKings
                    - threeCheck
                  default: standard
                rated:
                  type: boolean
                  description: Games are rated and impact players ratings
                  default: true
                position:
                  type: string
                  description: Custom initial position (in FEN) for all games of the tournament. Must be a legal chess position. Only works with standard chess, not variants (except Chess960).
                berserkable:
                  type: boolean
                  description: Whether the players can use berserk
                  default: true
                streakable:
                  type: boolean
                  description: After 2 wins, consecutive wins grant 4 points instead of 2.
                  default: true
                # "conditions.titled":
                #   type: boolean
                #   description: Whether to require a title to enter the tournament
                #   default: false
                hasChat:
                  type: boolean
                  description: Whether the players can discuss in a chat
                  default: true
                description:
                  type: string
                  description: Anything you want to tell players about the tournament
                password:
                  type: string
                  description: Make the tournament private, and restrict access with a password
                conditions.minRating.rating:
                  type: integer
                  description: Minimum rating to join. Leave empty to let everyone join the tournament.
                conditions.maxRating.rating:
                  type: integer
                  description: Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.
                conditions.nbRatedGame.nb:
                  type: integer
                  description: Minimum number of rated games required to join.
              required:
                - clockTime
                - clockIncrement
                - minutes
      responses:
        200:
          description: The Arena tournament was successfully updated.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArenaTournament'
        400:
          description: The update of the Arena tournament failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/tournament/{id}/join:
    post:
      operationId: apiTournamentJoin
      summary: Join an Arena tournament
      description: |
        Join an Arena tournament, possibly with a password and/or a team.
      tags:
        - "Arena tournaments"
      security:
        - OAuth2: ["tournament:write"]
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
            example: "hL7vMrFQ"
          required: true
      requestBody:
        description: You may need these depending on the tournament to join
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: The tournament password, if one is required
                team:
                  type: string
                  description: The team to join the tournament with, for team battle tournaments
      responses:
        200:
          description: The tournament was successfully joined.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          description: Joining the tournament failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/tournament/{id}/terminate:
    post:
      operationId: apiTournamentTerminate
      summary: Terminate an Arena tournament
      description: |
        Terminate an Arena tournament
      tags:
        - "Arena tournaments"
      security:
        - OAuth2: ["tournament:write"]
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
            example: "hL7vMrFQ"
          required: true
      responses:
        200:
          description: The tournament was successfully terminated.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          description: Terminating the tournament failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/tournament/team-battle/{id}:
      post:
        operationId: apiTournamentTeamBattlePost
        summary: Update a team battle
        description: |
          Set the teams and number of leaders of a team battle.

          To update the other attributes of a team battle, use the [tournament update endpoint](#operation/apiTournamentUpdate).
        tags:
          - "Arena tournaments"
        security:
          - OAuth2: ["tournament:write"]
        parameters:
          - in: path
            name: id
            description: The tournament ID (8 characters)..
            required: true
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/x-www-form-urlencoded:
              schema:
                type: object
                properties:
                  teams:
                    type: string
                    description: |
                      All team IDs of the team battle, separated by commas.
                      Make sure to always send the full list.
                      Teams that are not in the list will be removed from the team battle.

                      Example: `coders,zhigalko_sergei-fan-club,hhSwTKZv`
                  nbLeaders:
                    type: integer
                    description: Number team leaders per team.
                required:
                  - teams
                  - nbLeaders
        responses:
          200:
            description: The team battle tournament was successfully updated.
            headers:
              Access-Control-Allow-Origin:
                schema:
                  type: string
                  default: "'*'"
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ArenaTournament'
          400:
            description: The update of the team battle tournament failed.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

  /api/tournament/{id}/games:
    get:
      operationId: gamesByTournament
      summary: Export games of an Arena tournament
      description: |
        Download games of a tournament in PGN or [ndjson](http://ndjson.org/) format.

        Games are sorted by reverse chronological order (most recent first)
      tags:
        - "Arena tournaments"
      security: []
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
          required: true
        - in: query
          name: moves
          description: Include the PGN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: pgnInJson
          description: Include the full PGN within the JSON response, in a `pgn` field.
          schema:
            type: boolean
            default: false
        - in: query
          name: tags
          description: Include the PGN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock comments in the PGN moves, when available.

            Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
          schema:
            type: boolean
            default: false
        - in: query
          name: evals
          description: |
            Include analysis evaluation comments in the PGN, when available.

            Example: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
          schema:
            type: boolean
            default: false
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: The list of games of an Arena tournament.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/GamePgn'
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/GameJson'

  /api/tournament/{id}/results:
    get:
      operationId: resultsByTournament
      summary: Get results of an Arena tournament
      description: |
        Players of an Arena tournament, with their score and performance, sorted by rank (best first).

        **Players are streamed as [ndjson](http://ndjson.org/)**, i.e. one JSON object per line.

        If called on an ongoing tournament, results can be inconsistent
        due to ranking changes while the players are being streamed.
        Use on finished tournaments for guaranteed consistency.
      tags:
        - "Arena tournaments"
      security: []
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
          required: true
        - in: query
          name: nb
          description: Max number of players to fetch
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: The results of the Arena tournament.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                example: {"rank":4,"score":389,"rating":2618,"username":"opperwezen","title":"IM","performance":2423,"team":"coders"}

  /api/tournament/{id}/teams:
    get:
      operationId: teamsByTournament
      summary: Get team standing of a team battle
      description: |
        Teams of a team battle tournament, with top players, sorted by rank (best first).
      tags:
        - "Arena tournaments"
      security: []
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
          required: true
      responses:
        200:
          description: The list of teams of a team battle tournament, with their respective top players.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                example: {"id":"CdPg1ey4","teams":[{"rank":1,"id":"cat-lovers","score":842,"players":[{"user":{"name":"lizen69","id":"lizen69"},"score":54},{"user":{"name":"lizen249","id":"lizen249"}}]}]}

  /api/user/{username}/tournament/created:
    get:
      operationId: apiUserNameTournamentCreated
      summary: Get tournaments created by a user
      description: |
        Get all tournaments created by a given user.

        Tournaments are sorted by reverse chronological order of start date (last starting first).

        **Tournaments are streamed as [ndjson](http://ndjson.org/)**, i.e. one JSON object per line.
      tags:
        - "Arena tournaments"
      security: []
      parameters:
        - in: path
          name: username
          description: The user whose created tournaments to fetch
          schema:
            type: string
          required: true
      responses:
        200:
          description: The list of tournaments created by the user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/ArenaTournament'

  /api/swiss/new/{teamId}:
    post:
      operationId: apiSwissNew
      summary: Create a new Swiss tournament
      description: |
        Create a Swiss tournament for your team.

        This endpoint mirrors the Swiss tournament form from your team pagee.

        You can create up to 12 tournaments per day.
      tags:
        - "Swiss tournaments"
      security:
        - OAuth2: ["tournament:write"]
      parameters:
        - in: path
          name: teamId
          description: ID of the team
          schema:
            type: string
          required: true
      requestBody:
        description: Parameters of the tournament
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The tournament name. Leave empty to get a random Grandmaster name
                'clock.limit':
                  type: number
                  description: Clock initial time in seconds
                  example: 300
                  minimum: 0
                  maximum: 3600
                'clock.increment':
                  type: integer
                  description: Clock increment in seconds
                  example: 1
                  minimum: 0
                  maximum: 600
                nbRounds:
                  type: integer
                  description: Maximum number of rounds to play
                  minimum: 3
                  maximum: 100
                  default: 8
                startsAt:
                  type: integer
                  description: Timestamp in milliseconds to start the tournament at a given date and time. By default, it starts 10 minutes after creation.
                roundInterval:
                  type: integer
                  description: |
                    How long to wait between each round, in seconds.

                    Set to 99999999 to manually schedule each round from the tournament UI.
                  minimum: 0
                  maximum: 86400
                  default: auto
                variant:
                  type: string
                  description: The variant to use in tournament games
                  enum:
                    - standard
                    - chess960
                    - crazyhouse
                    - antichess
                    - atomic
                    - horde
                    - kingOfTheHill
                    - racingKings
                    - threeCheck
                  default: standard
                description:
                  type: string
                  description: Anything you want to tell players about the tournament
                rated:
                  type: boolean
                  description: Games are rated and impact players ratings
                  default: true
                chatFor:
                  type: number
                  description: |
                    Who can read and write in the chat.
                    - 0  = No-one
                    - 10 = Only team leaders
                    - 20 = Only team members
                    - 30 = All Play Strategy players
                  default: 20
              required:
                - 'clock.limit'
                - 'clock.increment'
                - nbRounds
      responses:
        200:
          description: The Swiss tournament was successfully created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SwissTournament'
        400:
          description: The creation of the Swiss tournament failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/swiss/{id}/terminate:
    post:
      operationId: apiSwissTerminate
      summary: Terminate a Swiss tournament
      description: |
        Terminate a Swiss tournament
      tags:
        - "Swiss tournaments"
      security:
        - OAuth2: ["tournament:write"]
      parameters:
        - in: path
          name: id
          description: The Swiss tournament ID.
          schema:
            type: string
            example: "W5FrxusN"
          required: true
      responses:
        200:
          description: The Swiss tournament was successfully terminated.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          description: Terminating the Swiss tournament failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /swiss/{id}.trf:
    get:
      operationId: swissTrf
      summary: Export TRF of a Swiss tournament
      description: |
        Download a tournament in the Tournament Report File format, the FIDE standard.

        Documentation: https://www.fide.com/FIDE/handbook/C04Annex2_TRF16.pdf

        Example: https://playstrategy.org/swiss/j8rtJ5GL.trf
      tags:
        - "Swiss tournaments"
      security: []
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
          required: true
      responses:
        200:
          description: The TRF representation of a Swiss tournament.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            text/plain:
              example:

  /api/swiss/{id}/games:
    get:
      operationId: gamesBySwiss
      summary: Export games of a Swiss tournament
      description: |
        Download games of a swiss tournament in PGN or [ndjson](http://ndjson.org/) format.

        Games are sorted by reverse chronological order (last round first)
      tags:
        - "Swiss tournaments"
      security: []
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
          required: true
        - in: query
          name: moves
          description: Include the PGN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: pgnInJson
          description: Include the full PGN within the JSON response, in a `pgn` field.
          schema:
            type: boolean
            default: false
        - in: query
          name: tags
          description: Include the PGN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock comments in the PGN moves, when available.

            Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
          schema:
            type: boolean
            default: false
        - in: query
          name: evals
          description: |
            Include analysis evaluation comments in the PGN, when available.

            Example: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
          schema:
            type: boolean
            default: false
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: The list of games of a Swiss tournament.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/GamePgn'
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/GameJson'

  /api/swiss/{id}/results:
    get:
      operationId: resultsBySwiss
      summary: Get results of a swiss tournament
      description: |
        Players of a swiss tournament, with their score and performance, sorted by rank (best first).

        **Players are streamed as [ndjson](http://ndjson.org/)**, i.e. one JSON object per line.

        If called on an ongoing tournament, results can be inconsistent
        due to ranking changes while the players are being streamed.
        Use on finished tournaments for guaranteed consistency.
      tags:
        - "Swiss tournaments"
      security: []
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
          required: true
        - in: query
          name: nb
          description: Max number of players to fetch
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: The results of a Swiss tournament.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                example: {"rank":4,"score":24,"tieBreak": 77,"rating":2618,"username":"opperwezen","title":"IM","performance":2423}

  /api/team/{teamId}/swiss:
    get:
      operationId: apiTeamSwiss
      summary: Get team swiss tournaments
      description: |
        Get all swiss tournaments of a team.

        Tournaments are sorted by reverse chronological order of start date (last starting first).

        **Tournaments are streamed as [ndjson](http://ndjson.org/)**, i.e. one JSON object per line.
      tags:
        - Teams
        - "Swiss tournaments"
      security: []
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
          required: true
          example: coders
        - in: query
          name: max
          description: How many tournaments to download.
          schema:
            type: integer
            minimum: 1
            default: 100
      responses:
        200:
          description: The list of Swiss tournaments of a team.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SwissTournament'

  /study/{studyId}/{chapterId}.pgn:
    get:
      operationId: studyChapterPgn
      summary: Export one study chapter
      description: |
        Download one study chapter in PGN format.
      tags:
        - Studies
      security: []
      parameters:
        - in: path
          name: studyId
          description: The study ID (8 characters).
          required: true
          schema:
            type: string
        - in: path
          name: chapterId
          description: The chapter ID (8 characters).
          required: true
          schema:
            type: string
        - in: query
          name: clocks
          description: |
            Include clock comments in the PGN moves, when available.

            Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
          schema:
            type: boolean
            default: true
        - in: query
          name: comments
          description: |
            Include analysis and annotator comments in the PGN moves, when available.

            Example: `12. Bxf6 { [%eval 0.23] } a3 { White is in a pickle. }`
          schema:
            type: boolean
            default: true
        - in: query
          name: variations
          description: |
            Include non-mainline moves, when available.

            Example: `4. d4 Bb4+ (4... Nc6 5. Nf3 Bb4+ 6. Bd2 (6. Nbd2 O-O 7. O-O) 6... Bd6) 5. Nd2`
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: The chapter of the study.
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/StudyPgn'

  /study/{studyId}.pgn:
    get:
      operationId: studyAllChaptersPgn
      summary: Export all chapters
      description: |
        Download all chapters of a study in PGN format.
      tags:
        - Studies
      security: []
      parameters:
        - in: path
          name: studyId
          description: The study ID (8 characters).
          required: true
          schema:
            type: string
        - in: query
          name: clocks
          description: |
            Include clock comments in the PGN moves, when available.

            Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
          schema:
            type: boolean
            default: true
        - in: query
          name: comments
          description: |
            Include analysis and annotator comments in the PGN moves, when available.

            Example: `12. Bxf6 { [%eval 0.23] } a3 { White is in a pickle. }`
          schema:
            type: boolean
            default: true
        - in: query
          name: variations
          description: |
            Include non-mainline moves, when available.

            Example: `4. d4 Bb4+ (4... Nc6 5. Nf3 Bb4+ 6. Bd2 (6. Nbd2 O-O 7. O-O) 6... Bd6) 5. Nd2`
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: The PGN representation of the study.
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/StudyPgn'

  /study/by/{username}/export.pgn:
    get:
      operationId: studyExportAllPgn
      summary: Export all studies of a user
      description: |
        Download all chapters of all studies of a user in PGN format.

        If authenticated, then all public, unlisted, and private studies are included.

        If not, only public, listed studies are included.
      tags:
        - Studies
        - OAuth
      security:
        - OAuth2: []
      parameters:
        - in: path
          name: username
          description: The user whose studies we export
          required: true
          schema:
            type: string
        - in: query
          name: clocks
          description: |
            Include clock comments in the PGN moves, when available.

            Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
          schema:
            type: boolean
            default: true
        - in: query
          name: comments
          description: |
            Include analysis and annotator comments in the PGN moves, when available.

            Example: `12. Bxf6 { [%eval 0.23] } a3 { White is in a pickle. }`
          schema:
            type: boolean
            default: true
        - in: query
          name: variations
          description: |
            Include non-mainline moves, when available.

            Example: `4. d4 Bb4+ (4... Nc6 5. Nf3 Bb4+ 6. Bd2 (6. Nbd2 O-O 7. O-O) 6... Bd6) 5. Nd2`
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: The studies of the user.
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/StudyPgn'

  /api/broadcast:
    get:
      operationId: broadcastIndex
      summary: Get official broadcasts
      description: |
        Get all incoming, ongoing, and finished official broadcasts.
        The broadcasts are sorted by start date, most recent first.

        **Broadcasts are streamed as [ndjson](http://ndjson.org/)**, i.e. one JSON object per line.
      tags:
        - Broadcasts
      parameters:
        - in: query
          name: nb
          description: Max number of broadcasts to fetch
          schema:
            type: integer
            default: 20
            minimum: 1
      responses:
        200:
          description: The list of official broadcasts.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Broadcast'
  /broadcast/new:
    post:
      operationId: broadcastCreate
      summary: Create a broadcast
      description: |
        Create a new broadcast to relay external games.
        This endpoint accepts the same form data as the [web form](https://playstrategy.org/broadcast/new).
      tags:
        - Broadcasts
        - OAuth
      security:
        - OAuth2: ["study:write"]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: |
                    Name of the broadcast. Length must be between 3 and 80 characters.

                    Example: `Sinquefield Cup - Round 10`
                description:
                  type: string
                  description: |
                    Short description of the broadcast. Length must be between 3 and 400 characters.

                    Example: `An 11 round classical tournament featuring the 9 highest rated players in the world. Including Carlsen, Caruana, Ding, Aronian, Nakamura and more.`
                syncUrl:
                  type: string
                  description: |
                    URL that Play Strategy will poll to get updates about the games. It must be publicly accessible from the Internet.

                    Example: `http://myserver.org/myevent/round-10/games.pgn`

                    If the syncUrl is missing, then the broadcast needs to be fed by [pushing PGN to it](#operation/broadcastPush).
                markdown:
                  type: string
                  description: Optional long description of the broadcast. Markdown is supported. Length must be less than 20,000 characters.
                credit:
                  type: string
                  description: Optional short text to give credit to the source provider.
                startsAt:
                  type: integer
                  description: |
                    Timestamp in milliseconds of broadcast start. Leave empty to manually start the broadcast.

                    Example: `1356998400070`
                  minimum: 1356998400070
                official:
                  type: boolean
                  description: For Play Strategy internal usage only. You are not allowed to use this flag. If you do it, we will have to call the police.
                throttle:
                  type: integer
                  description: For Play Strategy internal usage only. You are not allowed to use this flag. If you do it, chess24 will [display ads on your broadcast](https://i.imgur.com/B47wT5P.jpg).
              required:
                - name
                - description
      responses:
        200:
          description: The broadcast was successfully created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Broadcast'
        400:
          description: The creation of the broadcast failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /broadcast/{slug}/{broadcastId}:
    get:
      operationId: broadcastGet
      summary: Get your broadcast
      description: |
        Get information about a broadcast that you created.
        You will need it if you want to update that broadcast.
      tags:
        - Broadcasts
        - OAuth
      security:
        - OAuth2: ["study:read"]
      parameters:
        - in: path
          name: slug
          description: The broadcast slug. Only used for SEO, the slug can be safely replaced by `-`. Only the `broadcastId` is actually used.
          required: true
          schema:
            type: string
            default: "-"
        - in: path
          name: broadcastId
          description: The broadcast ID (8 characters).
          required: true
          schema:
            type: string
      responses:
        200:
          description: The information about the broadcast.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Broadcast'

  /broadcast/{slug}/{broadcastId}/edit:
      post:
        operationId: broadcastUpdate
        summary: Update your broadcast
        description: |
          Update information about a broadcast that you created.
          This endpoint accepts the same form data as the web form.
          All fields must be populated with data. Missing fields will override the broadcast with empty data.
          For instance, if you omit `startDate`, then any pre-existing start date will be removed.
        tags:
          - Broadcasts
          - OAuth
        security:
          - OAuth2: ["study:write"]
        parameters:
          - in: path
            name: slug
            description: The broadcast slug. Only used for SEO, the slug can be safely replaced by `-`. Only the `broadcastId` is actually used.
            required: true
            schema:
              type: string
              default: "-"
          - in: path
            name: broadcastId
            description: The broadcast ID (8 characters).
            required: true
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/x-www-form-urlencoded:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: |
                      Name of the broadcast. Length must be between 3 and 80 characters.

                      Example: `Sinquefield Cup - Round 10`
                  description:
                    type: string
                    description: |
                      Short description of the broadcast. Length must be between 3 and 400 characters.

                      Example: `An 11 round classical tournament featuring the 9 highest rated players in the world. Including Carlsen, Caruana, Ding, Aronian, Nakamura and more.`
                  syncUrl:
                    type: string
                    description: |
                      URL that Play Strategy will poll to get updates about the games. It must be publicly accessible from the Internet.

                      Example: `http://myserver.org/myevent/round-10/games.pgn`
                  markdown:
                    type: string
                    description: Optional long description of the broadcast. Markdown is supported. Length must be less than 20,000 characters.
                  credit:
                    type: string
                    description: Optional short text to give credit to the source provider.
                  startsAt:
                    type: integer
                    description: |
                      Timestamp in milliseconds of broadcast start. Leave empty to manually start the broadcast.

                      Example: `1356998400070`
                    minimum: 1356998400070
                  official:
                    type: boolean
                    description: For Play Strategy internal usage only. You are not allowed to use this flag. If you do it, we will have to call the police.
                  throttle:
                    type: integer
                    description: For Play Strategy internal usage only. You are not allowed to use this flag. If you do it, chess24 will display ads on your broadcast.
                required:
                  - name
                  - description
        responses:
          200:
            description: The broadcast was successfully edited.
            headers:
              Access-Control-Allow-Origin:
                schema:
                  type: string
                  default: "'*'"
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Broadcast'
          400:
            description: The edition of the broadcast failed.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

  /broadcast/{slug}/{broadcastId}/push:
    post:
      operationId: broadcastPush
      summary: Push PGN to your broadcast
      description: |
        Update your broadcast with new PGN.
        Only for broadcast without a source URL.
      tags:
        - Broadcasts
        - OAuth
      security:
        - OAuth2: ["study:write"]
      parameters:
        - in: path
          name: slug
          description: The broadcast slug. Only used for SEO, the slug can be safely replaced by `-`. Only the `broadcastId` is actually used.
          required: true
          schema:
            type: string
            default: "-"
        - in: path
          name: broadcastId
          description: The broadcast ID (8 characters).
          required: true
          schema:
            type: string
      requestBody:
        description: The PGN. It can contain up to 64 games, separated by a double new line.
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        200:
          description: The broadcast was successfully updated.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ok'

  /api/simul:
    get:
      operationId: apiSimul
      summary: Get current simuls
      description: |
        Get recently finished, ongoing, and upcoming simuls.
      tags:
        - Simuls
      security: []
      responses:
        200:
          description: The list of simuls.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Simul'

  /api/team/{teamId}:
    get:
      operationId: teamShow
      summary: Get a single team
      description: Infos about a team
      tags:
        - Teams
      security: []
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
          required: true
      responses:
        200:
          description: The information about the team.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'

  /api/team/all:
    get:
      operationId: teamAll
      summary: Get popular teams
      description: |
        Paginator of the most popular teams.
      tags:
        - Teams
      security: []
      parameters:
        - in: query
          name: page
          schema:
            type: number
            example: 1
            default: 1
      responses:
        200:
          description: A paginated list of the most popular teams.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'

  /api/team/of/{username}:
    get:
      operationId: teamOfUsername
      summary: Teams of a player
      description: |
        All the teams a player is a member of.
      tags:
        - Teams
      security: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
            example: "thibault"
          required: true
      responses:
        200:
          description: The list of teams the user is a member of.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'

  /api/team/search:
    get:
      operationId: teamSearch
      summary: Search teams
      description: |
        Paginator of team search results for a keyword.
      tags:
        - Teams
      security: []
      parameters:
        - in: query
          name: text
          schema:
            type: string
            example: coders
        - in: query
          name: page
          schema:
            type: number
            example: 1
            default: 1
      responses:
        200:
          description: The paginated list of teams.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'

  /api/team/{teamId}/users:
    get:
      operationId: teamIdUsers
      summary: Get members of a team
      description: |
        Members are sorted by reverse chronological order of joining the team (most recent first).

        **Members are streamed as [ndjson](http://ndjson.org/)**, i.e. one JSON object per line.
      tags:
        - Users
        - Teams
      security: []
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            example: "coders"
          required: true
      responses:
        200:
          description: The list of users in the team.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/UserExtended'

  /api/team/{teamId}/arena:
    get:
      operationId: apiTeamArena
      summary: Get team Arena tournaments
      description: |
        Get all Arena tournaments relevant to a team.

        Tournaments are sorted by reverse chronological order of start date (last starting first).

        **Tournaments are streamed as [ndjson](http://ndjson.org/)**, i.e. one JSON object per line.
      tags:
        - Teams
        - "Arena tournaments"
      security: []
      parameters:
        - in: path
          name: teamId
          description: ID of the team
          schema:
            type: string
          required: true
        - in: query
          name: max
          description: How many tournaments to download.
          schema:
            type: integer
            minimum: 1
            default: 100
      responses:
        200:
          description: The list of Arena tournaments of a team.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArenaTournament'

  /team/{teamId}/join:
    post:
      operationId: teamIdJoin
      summary: Join a team
      description: |
        Join a team.
        If the team join policy requires a confirmation,
        and the team owner is not the oAuth app owner,
        and the `message` field is not set,
        then the call fails with `403 Forbidden`.
      tags:
        - Teams
        - OAuth
      security:
        - OAuth2: ["team:write"]
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            example: "coders"
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: Optional request message, if the team requires one.
                password:
                  type: string
                  description: Optional password, if the team requires one.
      responses:
        200:
          description: The request to join a team was successfully sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'

  /team/{teamId}/quit:
    post:
      operationId: teamIdQuit
      summary: Leave a team
      description: |
        Leave a team.
        - https://playstrategy.org/team
      tags:
        - Teams
        - OAuth
      security:
        - OAuth2: ["team:write"]
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            example: "coders"
          required: true
      responses:
        200:
          description: The logged in user has successfully left the team.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'

  /team/{teamId}/kick/{userId}:
    post:
      operationId: teamIdKickUserId
      summary: Kick a user from your team
      description: |
        Kick a member out of one of your teams.
        - https://playstrategy.org/team
      tags:
        - Teams
        - OAuth
      security:
        - OAuth2: ["team:write"]
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            example: "coders"
          required: true
        - in: path
          name: userId
          schema:
            type: string
            example: "neio"
          required: true
      responses:
        200:
          description: The member has been kicked from the team.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'

  /team/{teamId}/pm-all:
    post:
      operationId: teamIdPmAll
      summary: Message all members
      description: |
        Send a private message to all members of a team.
        You must own the team.
      tags:
        - Teams
        - OAuth
      security:
        - OAuth2: ["team:write"]
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            example: "coders"
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: The message to send to all your team members.
      responses:
        200:
          description: The message has successfully been sent to all team members.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          description: The sending of message to all team members has failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /streamer/live:
    get:
      operationId: streamerLive
      summary: Get live streamers
      description: |
        Get basic info about currently streaming users.

        This API is very fast and cheap on Play Strategy side.
        So you can call it quite often (like once every 5 seconds).
      tags:
        - Users
      security: []
      responses:
        200:
          description: The list of live streamers and their respective information.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    title:
                      type: string
                      nullable: true
                    online:
                      type: boolean
                      nullable: true
                    patron:
                      type: boolean
                      nullable: true
                example: [
                  {
                    "id": "aliquantus",
                    "name": "Aliquantus"
                  },
                  {
                    "id": "chess-network",
                    "name": "Chess-Network",
                    "title": "NM",
                    "playing": true,
                    "patron": true
                  }
                ]

  /api/crosstable/{user1}/{user2}:
    get:
      operationId: apiCrosstable
      summary: Get crosstable
      description: |
        Get total number of games, and current score, of any two users.

        If the `matchup` flag is provided, and the users are currently playing, also gets the current match game number and scores.
      tags:
        - Users
      security: []
      parameters:
        - in: path
          name: user1
          schema:
            type: string
          required: true
        - in: path
          name: user2
          schema:
            type: string
          required: true
        - in: query
          name: matchup
          description: Whether to get the current match data, if any
          schema:
            type: boolean
      responses:
        200:
          description: The crosstable of the two users.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Crosstable'

  /api/player/autocomplete:
    get:
      operationId: apiPlayerAutocomplete
      summary: Autocomplete usernames
      description: |
        Provides autocompletion options for an incomplete username.
      tags:
        - Users
      security: []
      parameters:
        - in: query
          name: term
          description: The beginning of a username
          schema:
            type: string
            minLength: 3
          required: true
        - in: query
          name: object
          description: |
            - `false` returns an array of usernames
            - `true` returns an object with matching users
          schema:
            type: boolean
            default: false
        - in: query
          name: friend
          description: |
            Returns followed players matching `term` if any, else returns other players.
            Requires [OAuth](#tag/OAuth).
          schema:
            type: boolean
      responses:
        "200":
          description: An array of players which usernames start with the provided term.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      type: string
                  - type: object
                    properties:
                      result:
                        type: array
                        items:
                          $ref: '#/components/schemas/LightUser'

  /api/user/{username}/following:
    get:
      operationId: apiUserFollowing
      summary: Get users followed by a user
      description: |
        **Users are streamed as [ndjson](http://ndjson.org/)**, i.e. one JSON object per line.
      tags:
        - Relations
      security: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
            example: "thibault"
          required: true
      responses:
        200:
          description: The list of users followed by a user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/UserExtended'

  /api/user/{username}/followers:
    get:
      operationId: apiUserFollowers
      summary: Get users who follow a user
      description: |
        **Users are streamed as [ndjson](http://ndjson.org/)**, i.e. one JSON object per line.
      tags:
        - Relations
      security: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
            example: "thibault"
          required: true
      responses:
        200:
          description: The list of users who follow a user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/UserExtended'

  /api/stream/event:
    get:
      operationId: apiStreamEvent
      summary: Stream incoming events
      description: "\n
      \ Stream the events reaching a Play Strategy user in real time as [ndjson](http://ndjson.org/).\n\n
      \ Each line is a JSON object containing a `type` field. Possible values are:\n
      \ - `gameStart` Start of a game\n
      \ - `gameFinish` Completion of a game\n
      \ - `challenge` A player sends you a challenge\n
      \ - `challengeCanceled` A player cancels their challenge to you\n
      \ - `challengeDeclined` The opponent declines your challenge\n
      \n
      \ When the stream opens, all current challenges and games are sent."
      tags:
        - Board
        - Bot
      security:
        - OAuth2: ["challenge:read", "bot:play", "board:play"]
      responses:
        200:
          description: The stream of events reaching the logged in user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            text/plain:
              example: |
                {"type":"challenge","challenge":{"id":"7pGLxJ4F","status":"created","challenger":{"id":"lovlas","name":"Lovlas","title":"IM","rating":2506,"patron":true,"online":true,"lag":24},"destUser":{"id":"thibot","name":"thibot","title":null,"rating":1500,"provisional":true,"online":true,"lag":45},"variant":{"key":"standard","name":"Standard","short":"Std"},"rated":true,"timeControl":{"type":"clock","limit":300,"increment":25,"show":"5+25"},"playerIndex":"random","perf":{"icon":"#","name":"Rapid"}}}
                {"type":"gameStart","game":{"id":"1lsvP62l"}}

  /api/board/seek:
    post:
      operationId: apiBoardSeek
      summary: Create a seek
      description: "\n
      \ Create a public seek, to start a game with a random player.\n\n
      \ The response is streamed but doesn't contain any information. **Keep the connection open to keep the seek active**.\n\n
      \ If the client closes the connection, the seek is canceled.\n\n
      \ If the seek is accepted, or expires, the server closes the connection.\n\n
      \ **Make sure to also have an [Event stream](#operation/apiStreamEvent) open**, to be notified when a game starts.\n
      \ We recommend opening the [Event stream](#operation/apiStreamEvent) first, then the seek stream. This way,\n
      \ you won't miss the game event if the seek is accepted immediately."
      tags:
        - Board
      security:
        - OAuth2: ["board:play"]
      requestBody:
        description: Parameters of the seek
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                rated:
                  type: boolean
                  description: Whether the game is rated and impacts players ratings.
                  example: true
                  default: false
                time:
                  type: number
                  description: Clock initial time in minutes.
                  example: 15
                  minimum: 0
                  maximum: 180
                increment:
                  type: integer
                  description: Clock increment in seconds.
                  example: 15
                  minimum: 0
                  maximum: 180
                variant:
                  type: string
                  description: The variant of the game.
                  enum:
                    - standard
                    - chess960
                    - crazyhouse
                    - antichess
                    - atomic
                    - horde
                    - kingOfTheHill
                    - racingKings
                    - threeCheck
                  default: standard
                playerIndex:
                  type: string
                  description: The playerIndex to play. Better left empty to automatically get 50% starting player (p1).
                  enum:
                    - random
                    - p1
                    - p2
                  default: random
                ratingRange:
                  type: string
                  description: |
                    The rating range of potential opponents. Better left empty.
                    Example: 1500-1800
              required:
                - time
                - increment
      responses:
        200:
          description: The seek was successfully created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            text/plain:
              example: ""
        400:
          description: The creation of the seek failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/board/game/stream/{gameId}:
    get:
      operationId: boardGameStream
      summary: Stream Board game state
      description: "\
      \ Stream the state of a game being played with the Board API, as [ndjson](http://ndjson.org/).\n\
      \nUse this endpoint to get updates about the game in real-time, with a single request.\n\
      \nEach line is a JSON object containing a `type` field. Possible values are:\n
      \ - `gameFull` Full game data. All values are immutable, except for the `state` field.\n
      \ - `gameState` Current state of the game. Immutable values not included. Sent when a move is played, a draw is offered, or when the game ends.\n
      \ - `chatLine` Chat message sent by a user in the `room` \"player\" or \"spectator\".\n\n
      \nThe first line is always of type `gameFull`."
      tags:
        - Board
      security:
        - OAuth2: ["board:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        200:
          description: The stream of the game.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotGameState'
        404:
          description: The game was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /api/board/game/{gameId}/move/{move}:
    post:
      operationId: boardGameMove
      summary: Make a Board move
      description: |
        Make a move in a game being played with the Board API.

        The move can also contain a draw offer/agreement.
      tags:
        - Board
      security:
        - OAuth2: ["board:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
        - in: path
          name: move
          required: true
          description: The move to play, in UCI format
          schema:
            type: string
            example: "e2e4"
        - in: query
          name: offeringDraw
          description: Whether to offer (or agree to) a draw
          schema:
            type: boolean
      responses:
        200:
          description: The move was successfully made.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          description: The move failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/board/game/{gameId}/chat:
    post:
      operationId: boardGameChat
      summary: Write in the chat
      description: |
        Post a message to the player or spectator chat, in a game being played with the Board API.
      tags:
        - Board
      security:
        - OAuth2: ["board:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                room:
                  type: string
                  enum:
                  - player
                  - spectator
                text:
                  type: string
                  example: "Thank you for the game!"
              required:
                - room
                - text
      responses:
        200:
          description: The message was successfully posted in the chat.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          description: The posting of the message in the chat failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/board/game/{gameId}/abort:
    post:
      operationId: boardGameAbort
      summary: Abort a game
      description: |
        Abort a game being played with the Board API.
      tags:
        - Board
      security:
        - OAuth2: ["board:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        200:
          description: The game successfully aborted.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          description: The abortion of the game failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/board/game/{gameId}/resign:
    post:
      operationId: boardGameResign
      summary: Resign a game
      description: |
        Resign a game being played with the Board API.
      tags:
        - Board
      security:
        - OAuth2: ["board:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        200:
          description: The game was successfully resigned.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          description: The resigning from the game failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/board/game/{gameId}/draw/{accept}:
    post:
      operationId: boardGameDraw
      summary: Handle draw offers
      description: |
        Create/accept/decline draw offers.
        - `yes`: Offer a draw, or accept the opponent's draw offer.
        - `no`: Decline a draw offer from the opponent.
      tags:
        - Board
      security:
        - OAuth2: ["board:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
        - in: path
          name: accept
          schema:
            type: boolean
            example: "yes"
          required: true
      responses:
        200:
          description: The draw offer was successfully sent.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          description: The draw offering failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/bot/account/upgrade:
    post:
      operationId: botAccountUpgrade
      summary: Upgrade to Bot account
      description: |
        Upgrade a Play Strategy player account into a Bot account. Only Bot accounts can use the Bot API.

        The account **cannot have played any game** before becoming a Bot account. The upgrade is **irreversible**. The account will only be able to play as a Bot.

        To upgrade an account to Bot, use the [official lichess-bot client](https://github.com/ShailChoksi/lichess-bot), or follow these steps:
        - Create an [API access token](https://playstrategy.org/account/oauth/token/create?scopes[]=bot:play) with "Play bot moves" permission.
        - `curl -d '' https://playstrategy.org/api/bot/account/upgrade -H "Authorization: Bearer <yourTokenHere>"`

        To know if an account has already been upgraded, use the [Get my profile API](#operation/accountMe):
        the `title` field should be set to `BOT`.
      tags:
        - Bot
      security:
        - OAuth2: ["bot:play"]
      responses:
        200:
          description: The bot account was successfully upgraded.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          description: The upgrade of the bot account failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/bot/game/stream/{gameId}:
    get:
      operationId: botGameStream
      summary: Stream Bot game state
      description: "\
      \ Stream the state of a game being played with the Bot API, as [ndjson](http://ndjson.org/).\n\
      \nUse this endpoint to get updates about the game in real-time, with a single request.\n\
      \nEach line is a JSON object containing a `type` field. Possible values are:\n
      \ - `gameFull` Full game data. All values are immutable, except for the `state` field.\n
      \ - `gameState` Current state of the game. Immutable values not included.\n
      \ - `chatLine` Chat message sent by a user (or the bot itself) in the `room` \"player\" or \"spectator\".\n\n
      \nThe first line is always of type `gameFull`."
      tags:
        - Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        200:
          description: The stream of the bot game.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotGameState'
        404:
          description: The bot game was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /api/bot/game/{gameId}/move/{move}:
    post:
      operationId: botGameMove
      summary: Make a Bot move
      description: |
        Make a move in a game being played with the Bot API.

        The move can also contain a draw offer/agreement.
      tags:
        - Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
        - in: path
          name: move
          required: true
          description: The move to play, in UCI format
          schema:
            type: string
            example: "e2e4"
        - in: query
          name: offeringDraw
          description: Whether to offer (or agree to) a draw
          schema:
            type: boolean
      responses:
        200:
          description: The bot move was successfully made.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          description: The bot move failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/bot/game/{gameId}/chat:
    post:
      operationId: botGameChat
      summary: Write in the chat
      description: |
        Post a message to the player or spectator chat, in a game being played with the Bot API.
      tags:
        - Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                room:
                  type: string
                  enum:
                  - player
                  - spectator
                text:
                  type: string
                  example: "Thank you for the game!"
              required:
                - room
                - text
      responses:
        200:
          description: The message was successfully posted in chat.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          description: The posting of the  message in chat failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/bot/game/{gameId}/abort:
    post:
      operationId: botGameAbort
      summary: Abort a game
      description: |
        Abort a game being played with the Bot API.
      tags:
        - Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        200:
          description: The game was successfully aborted.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          description: The abortion of the game failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/bot/game/{gameId}/resign:
    post:
      operationId: botGameResign
      summary: Resign a game
      description: |
        Resign a game being played with the Bot API.
      tags:
        - Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        200:
          description: The game was successfully resigned from.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          description: Resigning the game failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/challenge/{username}:
    post:
      operationId: challengeCreate
      summary: Create a challenge
      description: |
        Challenge someone to play. The targeted player can choose to accept or decline.

        If the challenge is accepted, you will be notified on the [event stream](#operation/apiStreamEvent)
        that a new game has started. The game ID will be the same as the challenge ID.

        If you also have an OAuth token with `challenge:write` scope for the receiving user,
        you can make them accept the challenge immediately by setting the `acceptByToken` field.
      tags:
        - Challenges
      security:
        - OAuth2: ["challenge:write", "bot:play", "board:play"]
      parameters:
        - in: path
          name: username
          schema:
            type: string
            example: "LeelaChess"
          required: true
      requestBody:
        description: Parameters of the challenge
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                rated:
                  type: boolean
                  description: Game is rated and impacts players ratings
                'clock.limit':
                  type: number
                  description: Clock initial time in seconds. If empty, a correspondence game is created.
                  example: 300
                  minimum: 0
                  maximum: 10800
                'clock.increment':
                  type: integer
                  description: Clock increment in seconds. If empty, a correspondence game is created.
                  example: 1
                  minimum: 0
                  maximum: 60
                days:
                  type: integer
                  description: Days per move, for correspondence games. Clock settings must be omitted.
                  example: 5
                  minimum: 1
                  maximum: 15
                playerIndex:
                  type: string
                  description: Which playerIndex you get to play
                  enum:
                    - random
                    - p1
                    - p2
                  default: 'random'
                variant:
                  type: string
                  description: The variant of the game
                  enum:
                    - standard
                    - chess960
                    - crazyhouse
                    - antichess
                    - atomic
                    - horde
                    - kingOfTheHill
                    - racingKings
                    - threeCheck
                  default: standard
                fen:
                  type: string
                  description: Custom initial position (in FEN). Variant must be standard, and the game cannot be rated. Castling moves will use UCI_Chess960 notation, for example e1h1 instead of e1g1.
                  default: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"
                acceptByToken:
                  type: string
                  description: |
                    Immediately accept the challenge and create the game.
                    Pass in an OAuth token (with the `challenge:write` scope) for the receiving user.
                    On success, the response will contain a `game` field instead of a `challenge` field.

                    Alternatively, consider the [bulk pairing API](#operation/bulkPairingCreate).
                message:
                  type: string
                  description: |
                    **Only if `acceptByToken` is set.**

                    Message that is sent to each player, when the game is created. It is sent from your user account.

                    `{opponent}`, `{player}` and `{game}` are placeholders that will be replaced with the opponent name, player name, and the game URLs.

                    You can omit this field to send the default message,
                    but if you set your own message, it must at least contain the `{game}` placeholder.
                  default: "Your game with {opponent} is ready: {game}."
      responses:
        200:
          description: The challenge was successfully created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeJson'
        400:
          description: The creation of the challenge failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/challenge/{challengeId}/accept:
    post:
      operationId: challengeAccept
      summary: Accept a challenge
      description: |
        Accept an incoming challenge.

        You should receive a `gameStart` event on the [incoming events stream](#operation/apiStreamEvent).
      tags:
        - Challenges
      security:
        - OAuth2: ["challenge:write", "bot:play", "board:play"]
      parameters:
        - in: path
          name: challengeId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        200:
          description: The challenge was successfully accepted.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        404:
          description: The challenge to accept was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /api/challenge/{challengeId}/decline:
    post:
      operationId: challengeDecline
      summary: Decline a challenge
      description: |
        Decline an incoming challenge.
      tags:
        - Challenges
      security:
        - OAuth2: ["challenge:write", "bot:play", "board:play"]
      parameters:
        - in: path
          name: challengeId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      requestBody:
        description: Details related to decline of challenge
        required: false
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Reason challenge was declined. It will be translated to the player's language. See [the full list in the translation file](https://github.com/ornicar/lila/blob/43fbd61029ff3960a21fbd213944bed66325696d/translation/source/challenge.xml#L14).
                  enum:
                    - generic
                    - later
                    - tooFast
                    - tooSlow
                    - timeControl
                    - rated
                    - casual
                    - standard
                    - variant
                    - noBot
                    - onlyBot
      responses:
        200:
          description: The challenge was successfully declined.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        404:
          description: The challenge to decline was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /api/challenge/{challengeId}/cancel:
    post:
      operationId: challengeCancel
      summary: Cancel a challenge
      description: |
        Cancel a challenge you sent, or aborts the game if the challenge was accepted, but the game was not yet played.
        Note that the ID of a game is the same as the ID of the challenge that created it.
      tags:
        - Challenges
      security:
        - OAuth2: ["challenge:write", "bot:play", "board:play"]
      parameters:
        - in: path
          name: challengeId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        200:
          description: The challenge was successfully cancelled.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        404:
          description: The challenge to cancel was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /api/challenge/ai:
    post:
      operationId: challengeAi
      summary: Challenge the AI
      description: |
        Start a game with Play Strategy AI.

        You will be notified on the [event stream](#operation/apiStreamEvent) that a new game has started.
      tags:
        - Challenges
      security:
        - OAuth2: ["challenge:write", "bot:play", "board:play"]
      requestBody:
        description: Parameters of the game
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                level:
                  type: number
                  description: AI strength
                  minimum: 1
                  maximum: 8
                'clock.limit':
                  type: number
                  description: Clock initial time in seconds. If empty, a correspondence game is created.
                  example: 300
                  minimum: 0
                  maximum: 10800
                'clock.increment':
                  type: integer
                  description: Clock increment in seconds. If empty, a correspondence game is created.
                  example: 1
                  minimum: 0
                  maximum: 60
                days:
                  type: integer
                  description: Days per move, for correspondence games. Clock settings must be omitted.
                  example: 5
                  minimum: 1
                  maximum: 15
                playerIndex:
                  type: string
                  description: Which playerIndex you get to play
                  enum:
                    - random
                    - p1
                    - p2
                  default: 'random'
                variant:
                  type: string
                  description: The variant of the game
                  enum:
                    - standard
                    - chess960
                    - crazyhouse
                    - antichess
                    - atomic
                    - horde
                    - kingOfTheHill
                    - racingKings
                    - threeCheck
                  default: standard
                fen:
                  type: string
                  description: Custom initial position (in FEN). Variant must be standard, and the game cannot be rated.
                  default: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"
      responses:
        200:
          description: The game with Play Strategy AI was successfully started.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameJson'
        400:
          description: The creation of a game with Play Strategy AI failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/challenge/open:
    post:
      operationId: challengeOpen
      summary: Open-ended challenge
      description: |
        Create a challenge that any 2 players can join.

        Share the URL of the challenge. the first 2 players to click it will be paired for a game.

        The response body also contains `p1Url` and `p2Url`.
        You can control the starting player by giving players the specific URLs,
        instead of the main challenge URL.

        Open challenges expire after 24h.

        To directly pair 2 known players, use [this endpoint](#operation/challengeCreate) instead,
        with the `acceptByToken` parameter.
      tags:
        - Challenges
      security: []
      requestBody:
        description: Parameters of the game
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                rated:
                  type: boolean
                  description: Game is rated and impacts players ratings
                'clock.limit':
                  type: number
                  description: Clock initial time in seconds. If empty, a correspondence game is created.
                  example: 300
                  minimum: 0
                  maximum: 10800
                'clock.increment':
                  type: integer
                  description: Clock increment in seconds. If empty, a correspondence game is created.
                  example: 1
                  minimum: 0
                  maximum: 60
                variant:
                  type: string
                  description: The variant of the game
                  enum:
                    - standard
                    - chess960
                    - crazyhouse
                    - antichess
                    - atomic
                    - horde
                    - kingOfTheHill
                    - racingKings
                    - threeCheck
                  default: standard
                fen:
                  type: string
                  description: Custom initial position (in FEN). Variant must be standard, and the game cannot be rated.
                  default: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"
                name:
                  type: string
                  description: Optional name for the challenge, that players will see on the challenge page.
      responses:
        200:
          description: The challenge was successfully created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeOpenJson'
        400:
          description: The creation of the challenge failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/challenge/{gameId}/start-clocks:
    post:
      operationId: challengeStartClocks
      summary: Start clocks of a game
      description: |
        Start the clocks of a game immediately, even if a player has not yet made a move.

        Requires the OAuth tokens of both players with `challenge:write` scope.

        If the clocks have already started, the call will have no effect.
      tags:
        - Challenges
      security:
        - OAuth2: ["challenge:write"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            description: ID of the game
          required: true
        - in: query
          name: token1
          description: OAuth token of a player
          schema:
            type: string
        - in: query
          name: token2
          description: OAuth token of the other player
          schema:
            type: string
      responses:
        200:
          description: The clock of a game was successfully started.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'

  /api/bulk-pairing:
    get:
      operationId: bulkPairingGet
      summary: View upcoming bulk pairings
      description: |
        Get a list of upcoming bulk pairings you created.

        Only bulk pairings that are scheduled in the future, or that have a clock start scheduled in the future, are listed.

        Bulk pairings are deleted from the server after the pairings are done and the clocks have started.
      tags:
        - Bulk pairings
      security:
        - OAuth2: ["challenge:bulk"]
      responses:
        200:
          description: The list of upcoming bulk pairing the logged in user created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BulkPairing'
    post:
      operationId: bulkPairingCreate
      summary: Create a bulk pairing
      description: |
        Schedule many games at once, up to 24h in advance.

        OAuth tokens are required for all paired players, with the `challenge:write` scope.

        You can schedule up to 500 games every 10 minutes. # [Contact us](mailto:noreply@playstrategy.org) if you need higher limits.

        The entire bulk is rejected if:
          - a token is missing
          - a token is present more than once
          - a token lacks the `challenge:write` scope
          - a player account is closed
          - a player is paired more than once
          - a bulk is already scheduled to start at the same time with the same player
          - you have 10 scheduled bulks
          - you have 1000 scheduled games

        Partial bulks are never created. Either it all fails, or it all succeeds.
        When it fails, it does so with an error message explaining the issue.
        Failed bulks are not counted in the rate limiting, they are free.
        Fix the issues, manually or programmatically, then retry to schedule the bulk.

        A successful bulk creation returns a JSON bulk document. Its ID can be used for further operations.
      tags:
        - Bulk pairings
      security:
        - OAuth2: ["challenge:bulk"]
      requestBody:
        description: Parameters of the pairings
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                players:
                  type: string
                  description: |
                    OAuth tokens of all the players to pair, with the syntax `tokenOfP1PlayerInGame1:tokenOfP2PlayerInGame1,tokenOfP1PlayerInGame2:tokenOfP2PlayerInGame2,...`.

                    The 2 tokens of the players of a game are separated with `:`. The first token gets the starting player (white) pieces. Games are separated with `,`.

                    Up to 1000 tokens can be sent, for a max of 500 games.

                    Each token must be included at most once.

                    Example: `token1:token2,token3:token4,token5:token6`
                'clock.limit':
                  type: number
                  description: |
                    Clock initial time in seconds. Example: `600`
                  minimum: 0
                  maximum: 10800
                'clock.increment':
                  type: integer
                  description: |
                    Clock increment in seconds. Example: `5`
                  minimum: 0
                  maximum: 60
                pairAt:
                  description: |
                    Date at which the games will be created.
                    Up to 24h in the future.
                    Omit, or set to current date and time, to start the games immediately.
                    Example: `1612289869919`
                  type: integer
                startClocksAt:
                  description: |
                    Date at which the clocks will be automatically started.
                    Up to 24h in the future.
                    Note that the clocks can start earlier than specified, if players start making moves in the game.
                    If omitted, the clocks will not start automatically.
                    Example: `1612289869919`
                  type: integer
                rated:
                  type: boolean
                  description: Game is rated and impacts players ratings
                variant:
                  type: string
                  description: The variant of the game
                  enum:
                    - standard
                    - chess960
                    - crazyhouse
                    - antichess
                    - atomic
                    - horde
                    - kingOfTheHill
                    - racingKings
                    - threeCheck
                  default: standard
                message:
                  type: string
                  description: |
                    Message that will be sent to each player, when the game is created.  It is sent from your user account.

                    `{opponent}` and `{game}` are placeholders that will be replaced with the opponent and the game URLs.

                    You can omit this field to send the default message,
                    but if you set your own message, it must at least contain the `{game}` placeholder.
                  default: "Your game with {opponent} is ready: {game}."
      responses:
        200:
          description: The bulk pairings have been successfully created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkPairing'
        400:
          description: The creation of the bulk pairings failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/bulk-pairing/{id}/start-clocks:
    post:
      operationId: bulkPairingStartClocks
      summary: Manually start clocks
      description: |
        Immediately start all clocks of the games of a bulk pairing.

        This overrides the `startClocksAt` value of an existing bulk pairing.

        If the games have not yet been created (`bulk.pairAt` is in the future), then this does nothing.

        If the clocks have already started (`bulk.startClocksAt` is in the past), then this does nothing.
      tags:
        - Bulk pairings
      security:
        - OAuth2: ["challenge:bulk"]
      parameters:
        - in: path
          name: id
          schema:
            type: string
            description: The ID of the bulk pairing
            example: "5IrD6Gzz"
          required: true
      responses:
        200:
          description: The clocks of the games of a bulk pairing were successfully started.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        404:
          description: The bulk pairing was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /api/bulk-pairing/{id}:
    delete:
      operationId: bulkPairingDelete
      summary: Cancel a bulk pairing
      description: |
        Cancel and delete a bulk pairing that is scheduled in the future.

        If the games have already been created, then this does nothing.

        Canceling a bulk pairing does not refund the rate limit cost of that bulk pairing.
      tags:
        - Bulk pairings
      security:
        - OAuth2: ["challenge:bulk"]
      parameters:
        - in: path
          name: id
          schema:
            type: string
            description: The ID of the bulk pairing
            example: "5IrD6Gzz"
          required: true
      responses:
        200:
          description: The bulk pairing was successfully deleted.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        404:
          description: The bulk pairing to delete was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'


  /api/round/{gameId}/add-time/{seconds}:
    post:
      operationId: roundAddTime
      summary: Add time to the opponent clock
      description: |
        Add seconds to the opponent's clock. Can be used to create games with time odds.
      tags:
        - Challenges
      security:
        - OAuth2: ["challenge:write"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            description: ID of the game
          required: true
        - in: path
          name: seconds
          description: How many seconds to give
          schema:
            type: string
            minimum: 1
            maximum: 86400
          required: true
      responses:
        200:
          description: Time was successfully added to the opponent's clock.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'

  /api/challenge/admin/{orig}/{dest}:
    post:
      operationId: challengeCreateAdmin
      summary: Create an admin challenge
      description: |
        **For administrators only. You are not allowed to use this endpoint. Use [Create a challenge](#operation/challengeCreate) instead.**

        Create a challenge between any two players, without OAuth tokens.
        The challenge will be immediately accepted, and a game created.
      tags:
        - Challenges
      security:
        - OAuth2: ["challenge:write"]
      parameters:
        - in: path
          name: orig
          schema:
            type: string
            description: "One of the two players"
            example: "Lisa"
          required: true
        - in: path
          name: dest
          schema:
            type: string
            description: "The other player"
            example: "Matilde"
          required: true
      requestBody:
        description: Parameters of the challenge
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                rated:
                  type: boolean
                  description: Game is rated and impacts players ratings
                'clock.limit':
                  type: number
                  description: Clock initial time in seconds. If empty, a correspondence game is created.
                  example: 300
                  minimum: 0
                  maximum: 10800
                'clock.increment':
                  type: integer
                  description: Clock increment in seconds. If empty, a correspondence game is created.
                  example: 1
                  minimum: 0
                  maximum: 60
                days:
                  type: integer
                  description: Days per move, for correspondence games. Clock settings must be omitted.
                  example: 5
                  minimum: 1
                  maximum: 15
                playerIndex:
                  type: string
                  description: Which playerIndex you get to play
                  enum:
                    - random
                    - p1
                    - p2
                  default: 'random'
                variant:
                  type: string
                  description: The variant of the game
                  enum:
                    - standard
                    - chess960
                    - crazyhouse
                    - antichess
                    - atomic
                    - horde
                    - kingOfTheHill
                    - racingKings
                    - threeCheck
                  default: standard
                fen:
                  type: string
                  description: Custom initial position (in FEN). Variant must be standard, and the game cannot be rated.
                  default: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"
                message:
                  type: string
                  description: |
                    Message that is sent to each player, when the game is created. It is sent from your user account.

                    `{opponent}` and `{game}` are placeholders that will be replaced with the opponent and the game URLs.

                    You can omit this field to send the default message,
                    but if you set your own message, it must at least contain the `{game}` placeholder.
                  default: "Your game with {opponent} is ready: {game}."
      responses:
        200:
          description: The challenge has been successfully created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeJson'
        400:
          description: The creation of the challenge failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /inbox/{username}:
    post:
      operationId: inboxUsername
      summary: Send a private message
      description: |
        Send a private message to another player.
      tags:
        - Messaging
      security:
        - OAuth2: ["msg:write"]
      parameters:
        - in: path
          name: username
          schema:
            type: string
            example: "someplayer"
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: "Thank you for the game!"
              required:
                - text
      responses:
        200:
          description: The private message has been successfully sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          description: The sending of the private message has failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/cloud-eval:
    get:
      operationId: apiCloudEval
      summary: Get cloud evaluation of a position.
      description: |
        Get the cached evaluation of a position, if available.

        Opening positions have more chances of being available. There are about 7 million positions in the database.

        Up to 5 variations may be available. Variants are supported.
      tags:
        - Analysis
      security: []
      parameters:
        - in: query
          name: fen
          required: true
          description: FEN of the position
          schema:
            type: string
          example: rnbqkbnr/ppp1pppp/8/3pP3/8/8/PPPP1PPP/RNBQKBNR b KQkq - 0 2
        - in: query
          name: multiPv
          description: Number of variations
          schema:
            type: number
            default: 1
        - in: query
          name: variant
          description: Variant
          schema:
            type: string
            default: standard
      responses:
        200:
          description: The evaluation of the position.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              example: {"fen":"rnbqkbnr/ppp1pppp/8/3pP3/8/8/PPPP1PPP/RNBQKBNR b KQkq - 0 2","knodes":13683,"depth":22,"pvs":[{"moves":"c8f5 d2d4 e7e6 g1f3 g8e7 c1e3 c7c5 d4c5 e7c6 b1c3","cp":-13},{"moves":"c7c5 c2c3 d5d4 g1f3 b8c6 c3d4 c6d4 b1c3 c8d7 f1d3","cp":-1},{"moves":"e7e6 d2d4 c7c5 c2c3 b8c6 g1f3 c8d7 b1a3 c5d4 c3d4","cp":24}]}


components:
  parameters:
    playstrategy:
      in: header
      name: Accept
      schema:
        type: string
        default: application/vnd.playstrategy.v3+json
      required: true
  schemas:
    Clock:
      type: object
      properties:
        limit:
          type: integer
        increment:
          type: integer

    ChallengeJson:
      example: {
        "id": "VU0nyvsW",
        "url": "https://playstrategy.org/VU0nyvsW",
        "playerIndex": "random",
        "direction": "out",
        "timeControl": {
          "increment": 2,
          "limit": 300,
          "show": "5+2",
          "type": "clock"
        },
        "variant": {
          "key": "standard",
          "name": "Standard",
          "short": "Std"
        },
        "challenger": {
          "id": "thibot",
          "name": "thibot",
          "online": true,
          "provisional": false,
          "rating": 1940,
          "title": "BOT"
        },
        "destUser": {
          "id": "leelachess",
          "name": "LeelaChess",
          "online": true,
          "provisional": true,
          "rating": 2670,
          "title": "BOT"
        },
        "perf": {
          "icon": ";",
          "name": "Correspondence"
        },
        "rated": true,
        "speed": "blitz",
        "status": "created"
      }

    ChallengeOpenJson:
      example: {
        "id": "VU0nyvsW",
        "url": "https://playstrategy.org/VU0nyvsW",
        "urlp1": "https://playstrategy.org/VU0nyvsW?playerIndex=p1",
        "urlp2": "https://playstrategy.org/VU0nyvsW?playerIndex=p2",
        "playerIndex": "random",
        "direction": "out",
        "timeControl": {
          "increment": 2,
          "limit": 300,
          "show": "5+2",
          "type": "clock"
        },
        "variant": {
          "key": "standard",
          "name": "Standard",
          "short": "Std"
        },
        "challenger": {
          "id": "thibot",
          "name": "thibot",
          "online": true,
          "provisional": false,
          "rating": 1940,
          "title": "BOT"
        },
        "destUser": {
          "id": "leelachess",
          "name": "LeelaChess",
          "online": true,
          "provisional": true,
          "rating": 2670,
          "title": "BOT"
        },
        "perf": {
          "icon": ";",
          "name": "Correspondence"
        },
        "rated": true,
        "speed": "blitz",
        "status": "created"
      }

    BulkPairing:
      example: {
        "id": "RVAcwgg7",
        "games": [
            {
                "id": "NKop9IyD",
                "black": "lizen1",
                "white": "thibault"
            },
            {
                "id": "KT8374ut",
                "black": "lizen3",
                "white": "lizen2"
            },
            {
                "id": "wInQr8Sk",
                "black": "lizen5",
                "white": "lizen4"
            }
        ],
        "variant": "standard",
        "clock": {
            "increment": 0,
            "limit": 300
        },
        "pairAt": 1612289869919,
        "pairedAt": null,
        "rated": false,
        "startClocksAt": 1612200422971,
        "scheduledAt": 1612203514628
    }

    BulksPairing:
      example: {
        "bulks": [
            {
                "id": "RVAcwgg7",
                "games": [
                    {
                        "id": "NKop9IyD",
                        "black": "lizen1",
                        "white": "thibault"
                    },
                    {
                        "id": "KT8374ut",
                        "black": "lizen3",
                        "white": "lizen2"
                    },
                    {
                        "id": "wInQr8Sk",
                        "black": "lizen5",
                        "white": "lizen4"
                    }
                ],
                "variant": "standard",
                "clock": {
                    "increment": 0,
                    "limit": 300
                },
                "pairAt": 1612289869919,
                "pairedAt": null,
                "rated": false,
                "startClocksAt": 1612200422971,
                "scheduledAt": 1612203514628
            }
        ]
    }

    GameJson:
      example: {
        "id": "q7ZvsdUF",
        "rated": true,
        "variant": "standard",
        "speed": "blitz",
        "perf": "blitz",
        "createdAt": 1514505150384,
        "lastMoveAt": 1514505592843,
        "status": "draw",
        "players": {
          "white": {
            "user": {
              "name": "Lance5500",
              "title": "LM",
              "patron": true,
              "id": "lance5500"
            },
            "rating": 2389,
            "ratingDiff": 4,
          },
          "black": {
            "user": {
              "name": "TryingHard87",
              "id": "tryinghard87"
            },
            "rating": 2498,
            "ratingDiff": -4,
          }
        },
        "opening": {
          "eco":"D31",
          "name":"Semi-Slav Defense: Marshall Gambit",
          "ply":7
        },
        "moves": "d4 d5 c4 c6 Nc3 e6 e4 Nd7 exd5 cxd5 cxd5 exd5 Nxd5 Nb6 Bb5+ Bd7 Qe2+ Ne7 Nxb6 Qxb6 Bxd7+ Kxd7 Nf3 Qa6 Ne5+ Ke8 Qf3 f6 Nd3 Qc6 Qe2 Kf7 O-O Kg8 Bd2 Re8 Rac1 Nf5 Be3 Qe6 Rfe1 g6 b3 Bd6 Qd2 Kf7 Bf4 Qd7 Bxd6 Nxd6 Nc5 Rxe1+ Rxe1 Qc6 f3 Re8 Rxe8 Nxe8 Kf2 Nc7 Qb4 b6 Qc4+ Nd5 Nd3 Qe6 Nb4 Ne7 Qxe6+ Kxe6 Ke3 Kd6 g3 h6 Kd3 h5 Nc2 Kd5 a3 Nc6 Ne3+ Kd6 h4 Nd8 g4 Ne6 Ke4 Ng7 Nc4+ Ke6 d5+ Kd7 a4 g5 gxh5 Nxh5 hxg5 fxg5 Kf5 Nf4 Ne3 Nh3 Kg4 Ng1 Nc4 Kc7 Nd2 Kd6 Kxg5 Kxd5 f4 Nh3+ Kg4 Nf2+ Kf3 Nd3 Ke3 Nc5 Kf3 Ke6 Ke3 Kf5 Kd4 Ne6+ Kc4",
        "clock": {
          "initial": 300,
          "increment": 3,
          "totalTime": 420
        }
      }
    GamePgn:
      example: |
        [Event "Rated Blitz game"]
        [Site "https://playstrategy.org/fY44h4OY"]
        [Date "2018.03.29"]
        [Round "-"]
        [White "pveldman"]
        [Black "thibault"]
        [Result "1-0"]
        [UTCDate "2018.03.29"]
        [UTCTime "01:38:15"]
        [WhiteElo "1610"]
        [BlackElo "1601"]
        [WhiteRatingDiff "+10"]
        [BlackRatingDiff "-10"]
        [Variant "Standard"]
        [TimeControl "180+0"]
        [ECO "C62"]
        [Opening "Ruy Lopez: Steinitz Defense"]
        [Termination "Normal"]
        [Event "U1700 SuperBlitz Arena"]

        1. e4 { [%clk 0:03:00] } e5 { [%clk 0:03:00] } 2. Nf3 { [%clk 0:02:59] } Nc6 { [%clk 0:02:58] } 3. Bb5 { [%clk 0:02:57] } d6 { [%clk 0:02:55] } 4. h3 { [%clk 0:02:54] } Nf6 { [%clk 0:02:52] } 5. Bxc6+ { [%clk 0:02:52] } bxc6 { [%clk 0:02:49] } 6. d3 { [%clk 0:02:51] } Be7 { [%clk 0:02:46] } 7. O-O { [%clk 0:02:47] } O-O { [%clk 0:02:45] } 8. b3 { [%clk 0:02:45] } d5 { [%clk 0:02:45] } 9. exd5 { [%clk 0:02:33] } cxd5 { [%clk 0:02:40] } 10. Nxe5 { [%clk 0:02:31] } Qd6 { [%clk 0:02:38] } 1-0
    MasterGamePgn:
      example: |
        [Event "Wch Blitz"]
        [Site "Astana"]
        [Date "2012.07.10"]
        [Round "23"]
        [White "Carlsen, Magnus"]
        [Black "Chadaev, Nikolay"]
        [Result "1-0"]
        [WhiteElo "2837"]
        [BlackElo "2580"]

        1. e4 e5 2. f4 d5 3. exd5 exf4 4. Nf3 Nf6 5. c4 c6 6. d4 cxd5 7. c5 Nc6 8. Bb5 Be7 9. O-O O-O 10. Bxf4 Bg4 11. Nc3 Ne4 12. Qd3 Bf5 13. Qe3 Bf6 14. Bxc6 bxc6 15. Ne5 Bxe5 16. Bxe5 Bg6 17. Nxe4 Bxe4 18. Qg3 f6 19. Bd6 Re8 20. b4 Bg6 21. a4 a6 22. h4 Qd7 23. h5 Bxh5 24. Rxf6 Qg4 25. Qxg4 Bxg4 26. Rf4 Bh5 27. Raf1 h6 28. Be5 Ra7 29. b5 axb5 30. axb5 cxb5 31. c6 Raa8 32. c7 Kh7 33. Rb1 Be2 34. Rf7 Rg8 35. Re7 Bc4 36. Kh2 Rae8 37. Rd7 Ra8 38. Rb2 Raf8 39. g4 Ra8 40. Rf2 b4 41. Rff7 h5 42. Rxg7+ Rxg7 43. Rxg7+ 1-0
    StudyPgn:
      example: |
        [Event "♦ All about the Sicilian Defense ♦: Dragon Variation"]
        [Site "https://playstrategy.org/study/8c8bmUfy/qwnXMwVC"]
        [Result "*"]
        [UTCDate "2017.06.25"]
        [UTCTime "10:12:04"]
        [Variant "Standard"]
        [ECO "B76"]
        [Opening "Sicilian Defense: Dragon Variation, Yugoslav Attack, Panov Variation"]
        [Annotator "https://playstrategy.org/@/Francesco_Super"]

        { This chapter will go over the Dragon Variation, a very common variation used by Black and it is the most aggressive variation in the Sicilian defense. }
        1. e4 c5 2. Nf3 { Simple developing move to control the d4 square } { [%csl Gd4,Gc5][%cal Gf3d4,Gc5d4] } 2... d6 { [%cal Gd6e5] } (2... e6 3. d4 cxd4 4. Nxd4 Nf6 5. e5 (5. Nc3 { [%cal Ge4e5] }) 5... Qa5+) 3. d4 { Whites want the exchange of pawns } { [%cal Gc5d4] } 3... cxd4 { [%cal Gf3d4] } 4. Nxd4 { Whites are now ahead in development but blacks still have the two central pawns whereas whites only one. } { [%csl Ge7,Gd6,Ge4] } 4... Nf6 { Blacks are now developing their knight and threatening the e4 pawn } { [%csl Ge4][%cal Gf6e4] } 5. Nc3 { The e4 pawn is now protected by the c3 knight } { [%csl Ge4,Bc3][%cal Rf6e4,Bc3e4] } 5... g6 { This is the DRAGON VARIATION. g6 allows the dark-squared bishop to develop and move to g7, controlling the long dark-squared diagonal } { [%csl Gd4] } 6. Be3 { [%cal Gd1d2,Gf2f3,Ge1c1,Gg2g4,Gh2h4,Gg4g5] } (6. Be2 Bg7 7. O-O Nc6 8. Be3 { [%cal Ge3d4] } (8. f3 Nxe4 { [%cal Gg7d4,Gc6d4] } 9. Nxc6 Qb6+ { [%cal Gb6c6,Gb6g1] } 10. Kh1 Nxc3 { [%cal Gc3d1,Gc3e2] } 11. bxc3 bxc6 { [%cal Gc8a6] }) 8... O-O 9. Nb3 a6 { [%cal Gb7b5,Gb5b4,Ge2c4] }) 6... Bg7 (6... Ng4 { [%cal Gg4e3] } 7. Bb5+ { [%cal Gb5e8,Gb8d7,Gc8d7,Gd1g4] } 7... Nc6 8. Nxc6 bxc6 9. Bxc6+ { [%cal Gc6a8] }) 7. f3 { The key opening moves for White, who attempt to castle queenside , whereas f3 strengthens the pawn structure, connecting e4 to the h2 and g2, while White also plan pushing to g4 and possibly h4. } { [%csl Bf3,Be3][%cal Rg2g4,Rh2h4,Rg4g5] } 7... O-O (7... h5 { Is operating against g4. }) 8. Qd2 { [%csl Gh6,Gg7][%cal Ge1c1,Ga1d1,Re3h6,Rd2h6] } 8... Nc6 { [%csl Gc6,Gh6][%cal Gb8c6,Ge1c1,Ga7a6,Ge3h6] } 9. g4 (9. Bh6 { [%cal Ge3d4] } 9... Bxh6 10. Qxh6 Nxd4) 9... Be6 10. Nxe6 fxe6 { [%cal Gf8f1] } 11. O-O-O Ne5 12. Be2 { [%csl Gf3][%cal Re5f3,Bd1h1,Bg1d1] } 12... Qc7 { [%csl Gc4][%cal Ge5c4,Gc4e3,Gc4d2,Bf8c8,Yc7c3] } 13. h4 Nc4 *

    Title:
      type: string
      enum: [GM, WGM, IM, WIM, FM, WFM, NM, CM, WCM, WNM, LM, BOT]
      example: NM

    LightUser:
      type: object
      properties:
        name:
          type: string
          example: "Chess-Network"
        title:
          $ref: '#/components/schemas/Title'
        patron:
          type: boolean
          example: true
        id:
          type: string
          example: "chess-network"

    Perf:
      type: object
      properties:
        games:
          type: integer
          example: 2945
        rating:
          type: integer
          example: 1609
        rd:
          type: integer
          example: 60
        prog:
          type: integer
          example: -22
        prov:
          type: boolean

#     StormPerf:
#       type: object
#       properties:
#         runs:
#           type: integer
#           example: 44
#         score:
#           type: integer
#           example: 61

    Perfs:
      type: object
      properties:
        chess960:
          $ref: '#/components/schemas/Perf'
        atomic:
          $ref: '#/components/schemas/Perf'
        racingKings:
          $ref: '#/components/schemas/Perf'
        ultraBullet:
          $ref: '#/components/schemas/Perf'
        blitz:
          $ref: '#/components/schemas/Perf'
        kingOfTheHill:
          $ref: '#/components/schemas/Perf'
        bullet:
          $ref: '#/components/schemas/Perf'
        correspondence:
          $ref: '#/components/schemas/Perf'
        horde:
          $ref: '#/components/schemas/Perf'
#         puzzle:
#           $ref: '#/components/schemas/Perf'
        classical:
          $ref: '#/components/schemas/Perf'
        rapid:
          $ref: '#/components/schemas/Perf'
#         storm:
#           $ref: '#/components/schemas/StormPerf'

    PlayTime:
      type: object
      properties:
        total:
          type: integer
          example: 3296897
        tv:
          type: integer
          example: 12134

    Profile:
      type: object
      properties:
        country:
          type: string
          example: EC
        location:
          type: string
        bio:
          type: string
          example: Free bugs!
        firstName:
          type: string
          example: Thibault
        lastName:
          type: string
          example: Duplessis
        fideRating:
          type: integer
          example: 1500
        uscfRating:
          type: integer
          example: 1500
        ecfRating:
          type: integer
          example: 1500
        links:
          type: string
          example: "github.com/ornicar\r\ntwitter.com/ornicar"

    Count:
      type: object
      properties:
        all:
          type: integer
          example: 9265
        rated:
          type: integer
          example: 7157
        ai:
          type: integer
          example: 531
        draw:
          type: integer
          example: 340
        drawH:
          type: integer
          example: 331
        loss:
          type: integer
          example: 4480
        lossH:
          type: integer
          example: 4207
        win:
          type: integer
          example: 4440
        winH:
          type: integer
          example: 4378
        bookmark:
          type: integer
          example: 71
        playing:
          type: integer
          example: 6
        import:
          type: integer
          example: 66
        me:
          type: integer
          example: 0

    User:
      type: object
      properties:
        id:
          type: string
          example: georges
        username:
          type: string
          example: Georges
        online:
          type: boolean
          example: true
        perfs:
          $ref: '#/components/schemas/Perfs'
        createdAt:
          type: integer
          example: 1290415680000
        disabled:
          type: boolean
          example: false
        tosViolation:
          type: boolean
          example: false
        profile:
          $ref: '#/components/schemas/Profile'
        seenAt:
          type: integer
          example: 1522636452014
        patron:
          type: boolean
          example: true
        playTime:
          $ref: '#/components/schemas/PlayTime'
        language:
          type: string
          example: en-GB
        title:
          $ref: '#/components/schemas/Title'

    UserExtended:
      allOf:
        - $ref: '#/components/schemas/User'
        - properties:
            url:
              type: string
              format: uri
              example: https://playstrategy.org/@/georges
            playing:
              type: string
              format: uri
              example: https://playstrategy.org/yqfLYJ5E/black
            nbFollowing:
              type: integer
              example: 299
            nbFollowers:
              type: integer
              example: 2735
            completionRate:
              type: integer
              example: 97
            count:
              $ref: '#/components/schemas/Count'
            streaming:
              type: boolean
              example: false
            followable:
              type: boolean
              example: true
            following:
              type: boolean
              example: false
            blocking:
              type: boolean
              example: false
            followsYou:
              type: boolean
              example: false

    Crosstable:
      example: {
        "users": {
          "neio": 201.5,
          "thibault": 144.5
        },
        "nbGames": 346,
        "matchup": {
          "users": {
            "neio": 44,
            "thibault": 43
            },
            "nbGames":87
          }
        }

#     PuzzleJson:
#       example: {
#         "game": {
#             "clock": "10+0",
#             "id": "VpVdGbna",
#             "perf": {
#                 "icon": "#",
#                 "name": "Rapid"
#             },
#             "pgn": "d4 Nf6 Nf3 g6 Nc3 d6 e4 c5 Be3 cxd4 Bxd4 Nc6 Be3 Qa5 Bd2 Bg7 Be2 O-O O-O Qb6 Rb1 Bg4 h3 Bxf3 Bxf3 Nd4 Be3 Nxf3+ Qxf3 Qc6 Bd4 a6 Bxf6 Bxf6 Nd5 Qxc2 Nxf6+ exf6 Qxf6 Qxe4 Qxd6 Rad8 Qb6 Rfe8 Rfe1 Qxe1+ Rxe1 Rxe1+ Kh2 Rd2 Kg3 Ree2 Qxb7 Rxb2 Qxa6 Rxa2 Qc8+ Kg7 Qc3+ Kg8 Qc5 Rxf2 Qc8+ Kg7 Qc3+ Kh6 Qe3+ Kg7 Qe5+ Kf8 Qh8+ Ke7 Qe5+ Kf8 Qb8+ Kg7 Qe5+ f6 Qe7+ Kh6 Qf8+ Kg5 h4+ Kh5 Qc5+ f5 Qc1 Rxg2+ Kh3 Rh2+ Kg3 Rag2+ Kf3 Rg4 Qd1 Rhxh4 Kf2 Rh2+ Kf3 Rh3+ Ke2 Rg2+ Kf1+ Rg4 Kf2 g5 Qd8 h6 Qe8+ Kh4 Kf1 h5 Qe1+ Rhg3 Qe5 f4 Qe1 f3 Kf2 Rf4 Qh1+ Rh3 Qe1 g4",
#             "players": [
#                 {
#                     "color": "white",
#                     "name": "borska (2013)",
#                     "userId": "borska"
#                 },
#                 {
#                     "color": "black",
#                     "name": "Xxn00bkillar69xX (1990)",
#                     "userId": "xxn00bkillar69xx"
#                 }
#             ],
#             "rated": true
#         },
#         "puzzle": {
#             "id": "K69di",
#             "initialPly": 123,
#             "plays": 1970,
#             "rating": 2022,
#             "solution": [
#                 "e1e7",
#                 "f4f6",
#                 "e7f6"
#             ],
#             "themes": [
#                 "short",
#                 "queenRookEndgame",
#                 "endgame",
#                 "mateIn2"
#             ]
#         },
#     }

#     PuzzleRoundJson:
#       type: object
#       properties:
#         id:
#           type: string
#           example: "BwPiW"
#         date:
#           type: number
#           example: 1514505150384
#         win:
#           type: boolean
#           example: true
#         puzzleRating:
#           type: number
#           example: 1877

#     PuzzleDashboardJson:
#       example: {
#         "days": 30,
#         "global": {
#           "firstWins": 276,
#           "nb": 501,
#           "performance": 1570,
#           "puzzleRatingAvg": 1523,
#           "replayWins": 2
#         },
#         "themes": {
#           "advancedPawn": {
#             "results": {
#               "firstWins": 19,
#               "nb": 39,
#               "performance": 1438,
#               "puzzleRatingAvg": 1476,
#               "replayWins": 1
#             },
#             "theme": "Advanced pawn"
#           },
#           "anastasiaMate": {
#             "results": {
#               "firstWins": 5,
#               "nb": 6,
#               "performance": 1720,
#               "puzzleRatingAvg": 1387,
#               "replayWins": 0
#             },
#             "theme": "Anastasia's mate"
#           }
#         }
#       }

#     StormDashboardJson:
#       example: {
#         "high": {
#             "allTime": 11,
#             "day": 0,
#             "month": 7,
#             "week": 0
#         },
#         "days": [
#             {
#                 "_id": "2021/1/28",
#                 "combo": 8,
#                 "errors": 1,
#                 "highest": 1084,
#                 "moves": 9,
#                 "runs": 26,
#                 "score": 4,
#                 "time": 175
#             },
#             {
#                 "_id": "2021/1/27",
#                 "combo": 14,
#                 "errors": 1,
#                 "highest": 1095,
#                 "moves": 15,
#                 "runs": 15,
#                 "score": 7,
#                 "time": 23
#             },
#             {
#                 "_id": "2021/1/22",
#                 "combo": 14,
#                 "errors": 1,
#                 "highest": 1095,
#                 "moves": 15,
#                 "runs": 15,
#                 "score": 3,
#                 "time": 23
#             },
#         ]
#     }

    RatingHistory:
      example: [{"name":"Bullet","points":[[2011,0,8,1472],[2011,0,9,1332],[2011,8,12,1314]]},{"name":"Blitz","points":[[2011,7,29,1332]]}]

    Top10s:
      example: {
        "bullet": [
          {
            "id": "bahadirozen",
            "username": "BahadirOzen",
            "perfs": {
              "bullet": {
                "rating": 3018,
                "progress": 18
              }
            },
            "online": true,
            "title": "FM"
          },
          {
            "id": "penguingim1",
            "username": "penguingim1",
            "perfs": {
              "bullet": {
                "rating": 2983,
                "progress": -36
              }
            },
            "title": "GM",
            "online": true,
            "patron": true
          },
          {
            "id": "night-king96",
            "username": "Night-King96",
            "perfs": {
              "bullet": {
                "rating": 2958,
                "progress": 35
              }
            },
            "title": "GM"
          },
        ],
        "blitz": [],
        "rapid": [],
        "classical": [],
        "ultraBullet": [],
        "chess960": [],
        "crazyhouse": [],
        "antichess": [],
        "atomic": [],
        "horde": [],
        "kingOfTheHill": [],
        "racingKings": [],
        "threeCheck": []
      }

    Leaderboard:
      example: {
        "users": [
          {
            "id": "bahadirozen",
            "username": "BahadirOzen",
            "perfs": {
              "bullet": {
                "rating": 3018,
                "progress": 18
              }
            },
            "online": true,
            "title": "FM"
          },
          {
            "id": "penguingim1",
            "username": "penguingim1",
            "perfs": {
              "bullet": {
                "rating": 2983,
                "progress": -36
              }
            },
            "title": "GM",
            "online": true,
            "patron": true
          },
          {
            "id": "night-king96",
            "username": "Night-King96",
            "perfs": {
              "bullet": {
                "rating": 2958,
                "progress": 35
              }
            },
            "title": "GM"
          },
        ]
      }

    UserPreferences:
      type: object
      properties:
        dark:
          type: boolean
          example: true
        transp:
          type: boolean
          example: false
        bgImg:
          type: string
          format: uri
        is3d:
          type: boolean
          example: false
        theme:
          type: string
          enum:
            - blue
            - blue2
            - blue3
            - blue-marble
            - canvas
            - wood
            - wood2
            - wood3
            - wood4
            - maple
            - maple2
            - brown
            - leather
            - green
            - marble
            - green-plastic
            - grey
            - metal
            - olive
            - newspaper
            - purple
            - purple-diag
            - pink
            - ic
        pieceSet:
          type: string
          enum:
            - cburnett
            - merida
            - alpha
            - pirouetti
            - chessnut
            - chess7
            - reillycraig
            - companion
            - riohacha
            - kosal
            - leipzig
            - fantasy
            - spatial
            - california
            - pixel
            - maestro
            - fresca
            - cardinal
            - gioco
            - tatiana
            - staunty
            - governor
            - dubrovny
            - icpieces
            - shapes
            - letter
        theme3d:
          type: string
          enum:
            - Black-White-Aluminium
            - Brushed-Aluminium
            - China-Blue
            - China-Green
            - China-Grey
            - China-Scarlet
            - Classic-Blue
            - Gold-Silver
            - Light-Wood
            - Power-Coated
            - Rosewood
            - Marble
            - Wax
            - Jade
            - Woodi
        pieceSet3d:
          type: string
          enum:
            - Basic
            - Wood
            - Metal
            - RedVBlue
            - ModernJade
            - ModernWood
            - Glass
            - Trimmed
            - Experimental
            - Staunton
            - CubesAndPi
        soundSet:
          type: string
          enum:
            - silent
            - standard
            - piano
            - nes
            - sfx
            - futuristic
            - robot
            - music
            - speech
        blindfold:
          type: integer
          example: 0
        autoQueen:
          type: integer
          example: 2
        autoThreefold:
          type: integer
          example: 2
        takeback:
          type: integer
          example: 3
        moretime:
          type: integer
          example: 3
        clockTenths:
          type: integer
          example: 1
        clockBar:
          type: boolean
          example: true
        clockSound:
          type: boolean
          example: true
        premove:
          type: boolean
          example: true
        animation:
          type: integer
          example: 2
        captured:
          type: boolean
          example: true
        follow:
          type: boolean
          example: true
        highlight:
          type: boolean
          example: true
        destination:
          type: boolean
          example: true
        coords:
          type: integer
          example: 2
        replay:
          type: integer
          example: 2
        challenge:
          type: integer
          example: 4
        message:
          type: integer
          example: 3
        coordColor:
          type: integer
          example: 2
        submitMove:
          type: integer
          example: 4
        confirmResign:
          type: integer
          example: 1
        insightShare:
          type: integer
          example: 1
        keyboardMove:
          type: integer
          example: 0
        zen:
          type: integer
          example: 0
        moveEvent:
          type: integer
          example: 2
        rookCastle:
          type: integer
          example: 1

    ArenaTournaments:
      type: object
      properties:
        created:
          type: array
          items:
            $ref: '#/components/schemas/ArenaTournament'
        started:
          type: array
          items:
            $ref: '#/components/schemas/ArenaTournament'
        finished:
          type: array
          items:
            $ref: '#/components/schemas/ArenaTournament'

    ArenaTournament:
      example: {
        "id": "QITRjufu",
        "fullName": "U1700 SuperBlitz Arena",
        "clock": {
          "increment": 0,
          "limit": 180
        },
        "minutes": 57,
        "createdBy": "playstrategy",
        "system": "arena",
        "secondsToStart": 0,
        "secondsToFinish": 36000,
        "isFinished": true,
        "isRecentlyFinished": true,
        "pairingsClosed": true,
        "startsAt": "2018-04-04T01:00:00.000Z",
        "nbPlayers": 154,
        "perf": {
          "icon": ")",
          "key": "blitz",
          "name": "Blitz",
          "position": 1
        },
        "schedule": {
          "freq": "hourly",
          "speed": "superblitz"
        },
        "variant": {
          "key": "standard",
          "name": "Standard",
          "short": "Std"
        },
        "duels": [
          {
            "id": "0MM6q4tQ",
            "p": [
              {
                "n": "player1",
                "r": 1500,
                "k": 3
              },
              {
                "n": "player2",
                "r": 1500,
                "k": 3
              }
            ]
          }
        ],
        "standings": {
          "page": 1,
          "players": [
            {
              "name": "player1",
              "rank": 1,
              "rating": 1500,
              "score": 3,
              "sheet": {
                "scores": [
                {
                  "0": 2,
                  "1": 2,
                },
                {
                  "0": 4,
                  "1": 3,
                },
                0
                ],
                "total": 6,
                "fire": true
              }
            }
          ],
        },
        "featured": {
          "id": "khe72Fer",
          "fen": "rn1qkb1r/pQ3ppp/2b2n2/8/5P2/4P3/PP4PP/RNB1KBNR",
          "playerIndex": "p2",
          "lastMove": "d7c6",
          "p1": {
            "rank": 2,
            "name": "player1",
            "rating": 1360
          },
          "p2": {
            "rank": 5,
            "name": "player2",
            "rating": 1431
          }
        },
        "podium": [
          {
            "name": "player1",
            "rank": 1,
            "rating": 1500,
            "score": 3,
            "sheet": {
              "scores": [
              {
                "0": 2,
                "1": 2,
              },
              {
                "0": 4,
                "1": 3,
              },
              0
              ],
              "total": 6,
              "fire": true
            },
            "nb": {
              "game": 3,
              "beserk": 0,
              "win": 2
            },
            "performance": 1787
          }
        ],
        "stats": {
          "games": 454,
          "moves": 27542,
          "whiteWins": 236,
          "blackWins": 207,
          "draws": 11,
          "berserks": 0,
          "averageRating": 1320
        }
      }

    SwissTournament:
      example: {
        "rated": true,
        "clock": {
            "increment": 0,
            "limit": 300
        },
        "createdBy": "thibault",
        "greatPlayer": {
            "name": "Wang",
            "url": "https://wikipedia.org/wiki/Wang_Hao_(chess_player)"
        },
        "id": "ZmKWCOye",
        "name": "Wang",
        "nbOngoing": 0,
        "nbPlayers": 0,
        "nbRounds": 2,
        "nextRound": {
            "at": "2020-05-11T12:23:18.233-06:00",
            "in": 600
        },
        "quote": {
            "author": "Emanuel Lasker",
            "text": "By what right does White, in an absolutely even position, such as after move one, when both sides have advanced 1. e4, sacrifice a pawn, whose recapture is quite uncertain, and open up his kingside to attack? And then follow up this policy by leaving the check of the black queen open? None whatever !"
        },
        "round": 0,
        "startsAt": "2020-05-11T12:23:18.233-06:00",
        "status": "created",
        "variant": "standard"
      }

    Simul:
      example: {
          "fullName": "GM ChessWeeb simul",
          "host": {
              "id": "chessweeb",
              "name": "ChessWeeb",
              "rating": 1500,
              "title": "GM"
          },
          "id": "pDGbxhUe",
          "isCreated": false,
          "isFinished": true,
          "isRunning": false,
          "name": "GM ChessWeeb",
          "nbApplicants": 0,
          "nbPairings": 24,
          "text": "",
          "variants": [
              {
                  "icon": "+",
                  "key": "standard",
                  "name": "Standard"
              }
          ]
      }

    Broadcast:
      example: {"tour":{"id":"phgcXuBl","name":"New in Chess Classic | Finals","slug":"new-in-chess-classic--finals","description":"Match for 1st 2nd and 3rd place.","markup":"<p>New in Chess Classic is the 5th event of Meltwater Champions Chess Tour. The top 8 players from the Preliminaries will be playing in the Knockout. The knockout match-ups consist of 4-game matches on the first two days. The time control is rapid, with 15 minutes and a 10 second increment per move.</p>\n<p>Tie breaks: If the match score is 1-1, two 5+3 games are then played, if still undecided an Armageddon game will be played, where White has 5 minutes to Black's 4, but a draw will count as a win for Black.</p>\n<p>Dates: 24th to 26th April (<a href=\"https://playstrategy.org/broadcast/new-in-chess-classic-preliminaries--day-1/oEeMZKX7\">Preliminaries</a>) , 27th April to 2nd May (Knockout)<br><a href=\"https://championschesstour.com/\">Official website</a></p>\n<h2>Schedule</h2>\n<table class=\"slist\">\n<thead>\n<tr><th>Round</th><th>Date</th><th><a href=\"https://time.is/UTC\">Time (UTC)</a></th></tr>\n</thead>\n<tbody>\n<tr><td><a href=\"https://playstrategy.org/broadcast/new-in-chess-classic--quarter-finals-day-1/quarter-finals-day-1/1R4i4rHd\">Quarter finals</a></td><td><a href=\"https://playstrategy.org/broadcast/new-in-chess-classic--quarter-finals-day-1/quarter-finals-day-1/1R4i4rHd\">Apr 27-28</a></td><td>17:00</td></tr>\n<tr><td><a href=\"https://playstrategy.org/broadcast/new-in-chess-classic--semi-finals/semi-finals-day-1/TJN73z17\">Semi finals</a></td><td><a href=\"https://playstrategy.org/broadcast/new-in-chess-classic--semi-finals/semi-finals-day-1/TJN73z17\">Apr 29-30</a></td><td>17:00</td></tr>\n<tr><td><a href=\"https://playstrategy.org/broadcast/new-in-chess-classic--finals/finals-day-1/BueO56UJ\">Finals</a></td><td><a href=\"https://playstrategy.org/broadcast/new-in-chess-classic--finals/finals-day-1/BueO56UJ\">May 1-2</a></td><td>17:00</td></tr>\n</tbody>\n</table>\n<h2>Finals</h2>\n<table class=\"slist\">\n<thead>\n<tr><th>Rank</th><th>Player name</th><th>F1</th><th>F2</th></tr>\n</thead>\n<tbody>\n<tr><td> </td><td> </td><td> </td><td> </td></tr>\n<tr><td>1</td><td>Magnus Carlsen</td><td>3</td><td>2</td></tr>\n<tr><td>2</td><td>Hikaru Nakamura</td><td>1</td><td>2</td></tr>\n</tbody>\n</table>\n<h2>Third place match</h2>\n<table class=\"slist\">\n<thead>\n<tr><th>Rank</th><th>Player name</th><th>M1</th><th>M2</th></tr>\n</thead>\n<tbody>\n<tr><td> </td><td> </td><td> </td><td> </td></tr>\n<tr><td>3</td><td>Shakhriyar Mamedyarov</td><td>2</td><td>2.5</td></tr>\n<tr><td>4</td><td>Levon Aronian</td><td>2</td><td>0.5</td></tr>\n</tbody>\n</table>\n","url":"http://l.org/broadcast/new-in-chess-classic--finals/phgcXuBl"},"rounds":[{"id":"BueO56UJ","name":"Finals Day 1","slug":"finals-day-1","finished":true,"startsAt":1619888421326,"url":"http://l.org/broadcast/new-in-chess-classic--finals/finals-day-1/BueO56UJ"},{"id":"yeGGfkfY","name":"Finals Day 2","slug":"finals-day-2","finished":true,"startsAt":1619974826231,"url":"http://l.org/broadcast/new-in-chess-classic--finals/finals-day-2/yeGGfkfY"}]}

    OpeningExplorerJson:
      example: {
        "white": 645088,
        "draws": 838971,
        "black": 462332,
        "averageRating": 2407,
        "moves": [
          {
            "uci": "e2e4",
            "san": "e4",
            "white": 291056,
            "draws": 376163,
            "black": 218378,
            "averageRating": 2401
          },
          {
            "uci": "d2d4",
            "san": "d4",
            "white": 234074,
            "draws": 304134,
            "black": 159442,
            "averageRating": 2414
          },
        ],
        "topGames": [
          {
            "id": "IpY1ThET",
            "winner": "white",
            "white": {
              "name": "Aronian, L.",
              "rating": 2826
            },
            "black": {
              "name": "Carlsen, M.",
              "rating": 2872
            },
            "year": 2014,
            "speed": "classical"
          },
        ],
        "recentGames": [],
        "opening": null
      }

    TablebaseJson:
      type: object
      properties:
        wdl:
          type: integer
          description: (2) win, (1) cursed win, (0) draw, (-1) blessed loss, (-2) loss, (null) unknown
        dtz:
          type: integer
          description: Distance to zeroing or null if unknown
        dtm:
          type: integer
          description: Distance to mate (only for positions with not more than 5 pieces)
        checkmate:
          type: boolean
        stalemate:
          type: boolean
        variant_win:
          type: boolean
          description: Only in chess variants (atomic, antichess)
        variant_loss:
          type: boolean
          description: Only in chess variants
        insufficient_material:
          type: boolean
        moves:
          type: array
          description: Information about legal moves, best first
          items:
            $ref: '#/components/schemas/Move'
      example:
        {
          "wdl": 2,
          "dtz": 1,
          "dtm": 17,
          "checkmate": false,
          "stalemate": false,
          "variant_win": false,
          "variant_loss": false,
          "insufficient_material": false,
          "moves": [
            {
              "uci": "h7h8q",
              "san": "h8=Q+",
              "wdl": -2,
              "dtz": -2,
              "dtm": -16,
              "zeroing": true,
              "checkmate": false,
              "stalemate": false,
              "variant_win": false,
              "variant_loss": false,
              "insufficient_material": false
            }
          ]
        }

    Move:
      type: object
      properties:
        uci:
          type: string
          example: "h7h8q"
        san:
          type: string
          example: "h8=Q+"
        wdl:
          type: integer
          description: (2) win, (1) cursed win, (0) draw, (-1) blessed loss, (-2) loss, (null) unknown
        dtz:
          type: integer
          description: Distance to zeroing or null if unknown
        dtm:
          type: integer
          description: Distance to mate (only for positions with not more than 5 pieces)
        zeroing:
          type: boolean
        checkmate:
          type: boolean
        stalemate:
          type: boolean
        variant_win:
          type: boolean
        variant_loss:
          type: boolean
        insufficient_material:
          type: boolean

    Team:
      type: object
      properties:
        id:
          type: string
          example: coders
        name:
          type: string
          example: Coders
        description:
          type: string
          example: "There are 10 kinds of people in the world: those who understand binary, and the others.\r\n\r\nIf you want to join the team, prove (briefly) that you can code in the request message!"
        open:
          type: boolean
          example: false
        leader:
          $ref: '#/components/schemas/LightUser'
        leaders:
          type: array
          items:
            $ref: '#/components/schemas/LightUser'
        nbMembers:
          type: integer
          example: 3129

    BotGameState:
      type: object
      properties:
        state:
          type: object
          properties:
            moves:
              type: string
              description: Current moves in UCI format
            wtime:
              type: integer
              description: Integer of milliseconds White has left on the clock
            btime:
              type: integer
              description: Integer of milliseconds Black has left on the clock
            winc:
              type: integer
              description: Integer of White Fisher increment.
            binc:
              type: integer
              description: Integer of Black Fisher increment.
            status:
              type: string
              description: Game status code. https://github.com/ornicar/scalachess/blob/0a7d6f2c63b1ca06cd3c958ed3264e738af5c5f6/src/main/scala/Status.scala#L16-L28
            winner:
              type: string
              description: PlayerIndex of the winner, if any
      example: [
        {
          "type": "gameFull",
          "id": "5IrD6Gzz",
          "rated": true,
          "variant": {
            "key": "standard",
            "name": "Standard",
            "short": "Std"
          },
          "clock": {
            "initial": 1200000,
            "increment": 10000
          },
          "speed": "classical",
          "perf": {
            "name": "Classical"
          },
          "createdAt": 1523825103562,
          "white": {
            "id": "lovlas",
            "name": "lovlas",
            "provisional": false,
            "rating": 2500,
            "title": "IM"
          },
          "black": {
            "id": "leela",
            "name": "leela",
            "rating": 2390,
            "title": null
          },
          "initialFen": "startpos",
          "state": {
            "type": "gameState",
            "moves": "e2e4 c7c5 f2f4 d7d6 g1f3 b8c6 f1c4 g8f6 d2d3 g7g6 e1g1 f8g7",
            "wtime": 7598040,
            "btime": 8395220,
            "winc": 10000,
            "binc": 10000,
            "status": "started"
          }
        },
        {
          "type": "gameState",
          "moves": "e2e4 c7c5 f2f4 d7d6 g1f3 b8c6 f1c4 g8f6 d2d3 g7g6 e1g1 f8g7 b1c3",
          "wtime": 7598040,
          "btime": 8395220,
          "winc": 10000,
          "binc": 10000,
          "status": "started"
        },
        {
          "type": "chatLine",
          "username": "thibault",
          "text": "Good luck, have fun",
          "room": "player"
        },
        {
          "type": "chatLine",
          "username": "lovlas",
          "text": "!eval",
          "room": "spectator"
        },
        {
          "type": "gameState",
          "moves": "e2e4 c7c5 f2f4 d7d6 g1f3 b8c6 f1c4 g8f6 d2d3 g7g6 e1g1 f8g7 b1c3",
          "wtime": 7598040,
          "btime": 8395220,
          "winc": 10000,
          "binc": 10000,
          "status": "resign",
          "winner": "black"
        }
      ]

    StreamEvents:
      example: |
        {"type":"challenge","challenge":{"id":"7pGLxJ4F","status":"created","challenger":{"id":"lovlas","name":"Lovlas","title":"IM","rating":2506,"patron":true,"online":true,"lag":24},"destUser":{"id":"thibot","name":"thibot","title":null,"rating":1500,"provisional":true,"online":true,"lag":45},"variant":{"key":"standard","name":"Standard","short":"Std"},"rated":true,"timeControl":{"type":"clock","limit":300,"increment":25,"show":"5+25"},"playerIndex":"random","perf":{"icon":"#","name":"Rapid"}}}
        {"type":"gameStart","game":{"id":"1lsvP62l"}}

    Ok:
      properties:
        ok:
          type: boolean
      example:
        ok: true

    Error:
      properties:
        error:
          type: string
          description: The cause of the error.
      example:
        error: "This request is invalid because [...]"

    NotFound:
      properties:
        error:
          type: string
      example:
        error: "Not found."

  securitySchemes:
    OAuth2:
      type: oauth2
      description: "### Authorization Code Flow\n\
        \ The authorization code flow allows your users to **login with Play Strategy**.\n\
        \ - [NodeJS example](https://github.com/Mind-Sports-Games/api/tree/master/example/oauth-authorization-code)\n\
        \ - [Flask/Python example](https://github.com/lakinwecker/lichess-oauth-flask)\n\
        \ - [NodeJS Passport strategy to login with Lichess OAuth2](https://www.npmjs.com/package/passport-lichess)\n\
        \ - [Create a Lichess OAuth app](https://playstrategy.org/account/oauth/app)\n\
        \ - [About authorization code flow](https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2#grant-type-authorization-code)\n\
        \n#### Real life Oauth2 Authorization Code Flow examples\n\
        \ - [English Chess Federation](https://ecf.octoknight.com/)\n\
        \ - [Rotherham Online Chess](https://rotherhamonlinechess.azurewebsites.net/tournaments)\n\
        \n### Personal API Token\n\
        \ Personal API tokens allow you to quickly interact with Play Strategy OAuth API.\n\
        \ - `curl https://playstrategy.org/api/account -H \"Authorization: Bearer <token>\"`\n\
        \ - [NodeJS example](https://github.com/Mind-Sports-Games/api/tree/master/example/oauth-personal-token)\n\
        \ - [Generate a personal API token](https://playstrategy.org/account/oauth/token)"
      flows:
        authorizationCode:
          authorizationUrl: https://oauth.playstrategy.org/oauth/authorize
          tokenUrl: https://oauth.playstrategy.org/oauth
          scopes:
            "preference:read": Read your preferences
            "preference:write": Write your preferences
            "email:read": Read your email address
            "challenge:read": Read incoming challenges
            "challenge:write": Create, accept, decline challenges
            "challenge:bulk": Create, delete, query bulk pairings
            "study:read": Read private studies and broadcasts
            "study:write": Create, update, delete studies and broadcasts
            "tournament:write": Create tournaments
#             "puzzle:read": Read puzzle activity
            "team:write": Join, leave, and manage teams
            "msg:write": Send private messages to other players
            "board:play": Play with the Board API
            "bot:play": Play with the Bot API. Only for [Bot accounts](#operation/botAccountUpgrade)
